
sdr.elf:     file format elf32-littlenios2
sdr.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00002950 memsz 0x00002950 flags r-x
    LOAD off    0x00003950 vaddr 0x00002950 paddr 0x000029c0 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00003a30 vaddr 0x00002a30 paddr 0x00002a30 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-
    LOAD off    0x00004000 vaddr 0x00808000 paddr 0x00808000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00808000  00808000  00004000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000270c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0000270c  0000270c  0000370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000070  00002950  000029c0  00003950  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  00002a30  00002a30  00003a30  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00004020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004b8  00000000  00000000  00004048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005aa4  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000029af  00000000  00000000  00009fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b64  00000000  00000000  0000c953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000063c  00000000  00000000  0000e4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c9d  00000000  00000000  0000eaf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000046d5  00000000  00000000  0000f791  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00013e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000005d0  00000000  00000000  00013e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000157d9  2**0
                  CONTENTS, READONLY
 16 .cpu          00000004  00000000  00000000  000157dc  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000157e0  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000157e1  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000009  00000000  00000000  000157e2  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000009  00000000  00000000  000157eb  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000009  00000000  00000000  000157f4  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000a  00000000  00000000  000157fd  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000041  00000000  00000000  00015807  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0003ea7e  00000000  00000000  00015848  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00808000 l    d  .entry	00000000 .entry
00000000 l    d  .text	00000000 .text
0000270c l    d  .rodata	00000000 .rodata
00002950 l    d  .rwdata	00000000 .rwdata
00002a30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../sdr_bsp//obj/HAL/src/crt0.o
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 sdr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001b08 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000026d0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 
000023f8 g     F .text	0000002c alt_main
0000226c g     F .text	00000044 __ashldi3
000029c0 g       *ABS*	00000000 __flash_rwdata_start
00001424 g     F .text	000000a4 __fixsfsi
00000058 g     F .text	0000002c wait_jtag_key
000025e0 g     F .text	00000038 alt_putstr
000029a8 g     O .rwdata	00000004 jtag_uart
00808000 g     F .entry	0000000c __reset
000000f0 g     F .text	0000003c get_freq
00000000 g       *ABS*	00000000 __flash_exceptions_start
00002a34 g     O .bss	00000004 alt_argv
0000a9a8 g       *ABS*	00000000 _gp
00002950 g     O .rwdata	00000030 alt_fd_list
00001960 g     F .text	000000d4 __floatsidf
0000263c g     F .text	0000005c altera_avalon_jtag_uart_read
00001c28 g     F .text	00000008 __udivsi3
000029ac g     O .rwdata	00000004 alt_max_fd
00002124 g     F .text	00000104 __unpack_d
0000012c g     F .text	0000016c print_dec
00000bc8 g     F .text	00000628 __umoddi3
00002a3c g       *ABS*	00000000 __bss_end
000022b0 g     F .text	00000044 alt_getchar
00000578 g     F .text	00000650 __udivdi3
0000003c g     F .text	0000001c jtag_key
00002980 g     O .rwdata	00000028 alt_dev_null
00001e38 g     F .text	000000c8 __unpack_f
000026cc g     F .text	00000004 alt_dcache_flush_all
00001a34 g     F .text	000000d4 __fixdfsi
000029c0 g       *ABS*	00000000 __ram_rwdata_end
000029b0 g     O .rwdata	00000008 alt_dev_list
00002950 g       *ABS*	00000000 __ram_rodata_end
00002228 g     F .text	00000044 __lshrdi3
00001c30 g     F .text	00000008 __umodsi3
00002a3c g       *ABS*	00000000 end
00001d0c g     F .text	0000012c __pack_f
00800000 g       *ABS*	00000000 __alt_stack_pointer
00001c60 g     F .text	000000ac __clzsi2
00002698 g     F .text	00000034 altera_avalon_jtag_uart_write
00002424 g     F .text	00000170 alt_printf
00000000 g     F .text	0000003c _start
00002638 g     F .text	00000004 alt_sys_init
00001380 g     F .text	000000a4 __floatsisf
00000084 g     F .text	0000001c wait_ps2_key
00001c38 g     F .text	00000028 __mulsi3
00002950 g       *ABS*	00000000 __ram_rwdata_start
0000270c g       *ABS*	00000000 __ram_rodata_start
000000a0 g     F .text	00000050 get_phase
00002a3c g       *ABS*	00000000 __alt_stack_base
000017ac g     F .text	000001b4 __divdf3
000014c8 g     F .text	000002e4 __muldf3
00002820 g     O .rodata	00000010 __thenan_sf
00002a30 g       *ABS*	00000000 __bss_start
00000298 g     F .text	000001d0 main
00002a30 g     O .bss	00000004 alt_envp
00001b7c g     F .text	00000050 __divsi3
00002830 g     O .rodata	00000014 __thenan_df
000011f0 g     F .text	00000190 __mulsf3
0000270c g       *ABS*	00000000 __flash_rodata_start
00002618 g     F .text	00000020 alt_irq_init
00002844 g     O .rodata	00000100 __clz_tab
00002a38 g     O .bss	00000004 alt_argc
000029b8 g     O .rwdata	00000008 alt_fs_list
00808020 g       *ABS*	00000000 __ram_exceptions_start
000029c0 g       *ABS*	00000000 _edata
00002a3c g       *ABS*	00000000 _end
00808020 g       *ABS*	00000000 __ram_exceptions_end
000026dc g     F .text	00000008 altera_nios2_qsys_irq_init
00001bcc g     F .text	0000005c __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
00808000 g       *ABS*	00000000 __alt_mem_onchip_ram
0080800c g       .entry	00000000 _exit
00000468 g     F .text	00000110 __muldi3
000026e4 g     F .text	00000028 strlen
00002594 g     F .text	0000004c alt_putchar
000026d8 g     F .text	00000004 alt_icache_flush_all
000022f4 g     F .text	00000104 alt_load
00001f00 g     F .text	00000224 __pack_d



Disassembly of section .entry:

00808000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  808000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  808004:	08400014 	ori	at,at,0
    jmp r1
  808008:	0800683a 	jmp	at

0080800c <_exit>:
	...

Disassembly of section .text:

00000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
       8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
       c:	d6aa6a14 	ori	gp,gp,43432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	108a8c14 	ori	r2,r2,10800

    movhi r3, %hi(__bss_end)
      18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      1c:	18ca8f14 	ori	r3,r3,10812

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	00022f40 	call	22f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	00023f80 	call	23f8 <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <alt_after_alt_main>

0000003c <jtag_key>:

int jtag_key (int base_addr) {
	int key, ch;

	key = 0;
	ch = IORD(base_addr, 0);
      3c:	20800037 	ldwio	r2,0(r4)
	if ((ch & 0x8000) != 0)
      40:	10e0000c 	andi	r3,r2,32768
      44:	18000226 	beq	r3,zero,50 <jtag_key+0x14>
		key = ch & 0xff;
      48:	10803fcc 	andi	r2,r2,255
      4c:	f800283a 	ret


int jtag_key (int base_addr) {
	int key, ch;

	key = 0;
      50:	0005883a 	mov	r2,zero
	ch = IORD(base_addr, 0);
	if ((ch & 0x8000) != 0)
		key = ch & 0xff;
	return key;
}
      54:	f800283a 	ret

00000058 <wait_jtag_key>:

int wait_jtag_key (int base_addr) {
      58:	defffe04 	addi	sp,sp,-8
      5c:	dc000015 	stw	r16,0(sp)
      60:	dfc00115 	stw	ra,4(sp)
      64:	2021883a 	mov	r16,r4
	int key;

	key = 0;
	while (key == 0) {
		key = jtag_key(base_addr);
      68:	8009883a 	mov	r4,r16
      6c:	000003c0 	call	3c <jtag_key>

int wait_jtag_key (int base_addr) {
	int key;

	key = 0;
	while (key == 0) {
      70:	103ffd26 	beq	r2,zero,68 <wait_jtag_key+0x10>
		key = jtag_key(base_addr);
	}
	return key;
}
      74:	dfc00117 	ldw	ra,4(sp)
      78:	dc000017 	ldw	r16,0(sp)
      7c:	dec00204 	addi	sp,sp,8
      80:	f800283a 	ret

00000084 <wait_ps2_key>:

int wait_ps2_key (long base) {
	IOWR(base, 2, 0);
      84:	20800204 	addi	r2,r4,8
      88:	10000035 	stwio	zero,0(r2)
	while ((IORD(base, 0) & 0x2) == 0);
      8c:	20c00037 	ldwio	r3,0(r4)
      90:	18c0008c 	andi	r3,r3,2
      94:	183ffd26 	beq	r3,zero,8c <wait_ps2_key+0x8>
	return IORD(base, 2);
}
      98:	10800037 	ldwio	r2,0(r2)
      9c:	f800283a 	ret

000000a0 <get_phase>:

long get_phase (int freq) {
      a0:	deffff04 	addi	sp,sp,-4
      a4:	dfc00015 	stw	ra,0(sp)
	return (freq * pow(2.0, 32.0)) / (float)PLL_FREQ;
      a8:	00019600 	call	1960 <__floatsidf>
      ac:	1009883a 	mov	r4,r2
      b0:	180b883a 	mov	r5,r3
      b4:	000d883a 	mov	r6,zero
      b8:	01d07c34 	movhi	r7,16880
      bc:	00014c80 	call	14c8 <__muldf3>
      c0:	000d883a 	mov	r6,zero
      c4:	01d06634 	movhi	r7,16792
      c8:	39f5e104 	addi	r7,r7,-10364
      cc:	1009883a 	mov	r4,r2
      d0:	180b883a 	mov	r5,r3
      d4:	00017ac0 	call	17ac <__divdf3>
      d8:	1009883a 	mov	r4,r2
      dc:	180b883a 	mov	r5,r3
      e0:	0001a340 	call	1a34 <__fixdfsi>
}
      e4:	dfc00017 	ldw	ra,0(sp)
      e8:	dec00104 	addi	sp,sp,4
      ec:	f800283a 	ret

000000f0 <get_freq>:

long get_freq (int phase) {
      f0:	deffff04 	addi	sp,sp,-4
      f4:	dfc00015 	stw	ra,0(sp)
	return (long)(((float)phase * (float)PLL_FREQ) / (float)pow(2.0, 32.0));
      f8:	00013800 	call	1380 <__floatsisf>
      fc:	1009883a 	mov	r4,r2
     100:	01532ff4 	movhi	r5,19647
     104:	296f0804 	addi	r5,r5,-17376
     108:	00011f00 	call	11f0 <__mulsf3>
     10c:	014be034 	movhi	r5,12160
     110:	1009883a 	mov	r4,r2
     114:	00011f00 	call	11f0 <__mulsf3>
     118:	1009883a 	mov	r4,r2
     11c:	00014240 	call	1424 <__fixsfsi>
}
     120:	dfc00017 	ldw	ra,0(sp)
     124:	dec00104 	addi	sp,sp,4
     128:	f800283a 	ret

0000012c <print_dec>:

void print_dec(alt_64 x) {
     12c:	defff204 	addi	sp,sp,-56
     130:	dfc00d15 	stw	ra,52(sp)
     134:	ddc00c15 	stw	r23,48(sp)
     138:	dd800b15 	stw	r22,44(sp)
     13c:	dd400a15 	stw	r21,40(sp)
     140:	dd000915 	stw	r20,36(sp)
     144:	dcc00815 	stw	r19,32(sp)
     148:	dc800715 	stw	r18,28(sp)
     14c:	dc400615 	stw	r17,24(sp)
     150:	dc000515 	stw	r16,20(sp)
	int i, j;
	char r[20];

	i = 0;
	j = 0;
	if (x == 0)
     154:	2144b03a 	or	r2,r4,r5
     158:	1000031e 	bne	r2,zero,168 <print_dec+0x3c>
		alt_putstr("0");
     15c:	01000034 	movhi	r4,0
     160:	2109c304 	addi	r4,r4,9996
     164:	00000306 	br	174 <print_dec+0x48>
	else
		if (x < 0) {
     168:	28000d0e 	bge	r5,zero,1a0 <print_dec+0x74>
			alt_putstr("-");
     16c:	01000034 	movhi	r4,0
     170:	2109c404 	addi	r4,r4,10000
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
				alt_printf("%c", (char)r[j]);
		}
}
     174:	dfc00d17 	ldw	ra,52(sp)
     178:	ddc00c17 	ldw	r23,48(sp)
     17c:	dd800b17 	ldw	r22,44(sp)
     180:	dd400a17 	ldw	r21,40(sp)
     184:	dd000917 	ldw	r20,36(sp)
     188:	dcc00817 	ldw	r19,32(sp)
     18c:	dc800717 	ldw	r18,28(sp)
     190:	dc400617 	ldw	r17,24(sp)
     194:	dc000517 	ldw	r16,20(sp)
     198:	dec00e04 	addi	sp,sp,56
	j = 0;
	if (x == 0)
		alt_putstr("0");
	else
		if (x < 0) {
			alt_putstr("-");
     19c:	00025e01 	jmpi	25e0 <alt_putstr>
			t = -x;
		}
		else {
			t = x;
     1a0:	2027883a 	mov	r19,r4
     1a4:	2829883a 	mov	r20,r5
	alt_u64 t;
	int i, j;
	char r[20];

	i = 0;
	j = 0;
     1a8:	0025883a 	mov	r18,zero
void print_dec(alt_64 x) {
	alt_u64 t;
	int i, j;
	char r[20];

	i = 0;
     1ac:	0023883a 	mov	r17,zero
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
					r[i++] = ',';
     1b0:	05c00b04 	movi	r23,44
     1b4:	00000106 	br	1bc <print_dec+0x90>
			alt_putstr("-");
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
     1b8:	8023883a 	mov	r17,r16
				j++;
				r[i++] = 0x30 + (t % 10);
     1bc:	9809883a 	mov	r4,r19
     1c0:	a00b883a 	mov	r5,r20
     1c4:	01800284 	movi	r6,10
     1c8:	000f883a 	mov	r7,zero
     1cc:	0000bc80 	call	bc8 <__umoddi3>
     1d0:	dc61883a 	add	r16,sp,r17
     1d4:	10800c04 	addi	r2,r2,48
				t = t / 10;
     1d8:	9809883a 	mov	r4,r19
     1dc:	a00b883a 	mov	r5,r20
		}
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
     1e0:	80800005 	stb	r2,0(r16)
				t = t / 10;
     1e4:	01800284 	movi	r6,10
     1e8:	000f883a 	mov	r7,zero
     1ec:	00005780 	call	578 <__udivdi3>
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
				j++;
     1f0:	94800044 	addi	r18,r18,1
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
     1f4:	9009883a 	mov	r4,r18
     1f8:	014000c4 	movi	r5,3
		}
		else {
			t = x;
			while (t > 0) {
				j++;
				r[i++] = 0x30 + (t % 10);
     1fc:	8c000044 	addi	r16,r17,1
				t = t / 10;
     200:	102b883a 	mov	r21,r2
     204:	182d883a 	mov	r22,r3
     208:	1027883a 	mov	r19,r2
     20c:	1829883a 	mov	r20,r3
				if ((j % 3) == 0)
     210:	0001bcc0 	call	1bcc <__modsi3>
     214:	1000031e 	bne	r2,zero,224 <print_dec+0xf8>
					r[i++] = ',';
     218:	dc21883a 	add	r16,sp,r16
     21c:	85c00005 	stb	r23,0(r16)
     220:	8c000084 	addi	r16,r17,2
			alt_putstr("-");
			t = -x;
		}
		else {
			t = x;
			while (t > 0) {
     224:	adaab03a 	or	r21,r21,r22
     228:	a83fe31e 	bne	r21,zero,1b8 <print_dec+0x8c>
				r[i++] = 0x30 + (t % 10);
				t = t / 10;
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
     22c:	80bfffc4 	addi	r2,r16,-1
     230:	d887883a 	add	r3,sp,r2
     234:	19000007 	ldb	r4,0(r3)
     238:	00c00b04 	movi	r3,44
     23c:	20c00126 	beq	r4,r3,244 <print_dec+0x118>
     240:	8005883a 	mov	r2,r16
				i=i-1;
			for (j=i-1; j>=0; j--)
     244:	143fffc4 	addi	r16,r2,-1
     248:	047fffc4 	movi	r17,-1
     24c:	00000606 	br	268 <print_dec+0x13c>

long get_freq (int phase) {
	return (long)(((float)phase * (float)PLL_FREQ) / (float)pow(2.0, 32.0));
}

void print_dec(alt_64 x) {
     250:	dc05883a 	add	r2,sp,r16
					r[i++] = ',';
			}
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
				alt_printf("%c", (char)r[j]);
     254:	11400007 	ldb	r5,0(r2)
     258:	01000034 	movhi	r4,0
     25c:	2109c504 	addi	r4,r4,10004
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
     260:	843fffc4 	addi	r16,r16,-1
				alt_printf("%c", (char)r[j]);
     264:	00024240 	call	2424 <alt_printf>
				if ((j % 3) == 0)
					r[i++] = ',';
			}
			if (r[i-1] == ',')
				i=i-1;
			for (j=i-1; j>=0; j--)
     268:	847ff91e 	bne	r16,r17,250 <print_dec+0x124>
				alt_printf("%c", (char)r[j]);
		}
}
     26c:	dfc00d17 	ldw	ra,52(sp)
     270:	ddc00c17 	ldw	r23,48(sp)
     274:	dd800b17 	ldw	r22,44(sp)
     278:	dd400a17 	ldw	r21,40(sp)
     27c:	dd000917 	ldw	r20,36(sp)
     280:	dcc00817 	ldw	r19,32(sp)
     284:	dc800717 	ldw	r18,28(sp)
     288:	dc400617 	ldw	r17,24(sp)
     28c:	dc000517 	ldw	r16,20(sp)
     290:	dec00e04 	addi	sp,sp,56
     294:	f800283a 	ret

00000298 <main>:

int main()
{
     298:	defff704 	addi	sp,sp,-36
  alt_u64 freq, freq_step;
  alt_u32 gain, key;

  alt_putstr("DE0 Cyclone III - Software Defined AM Radio\n\n");
     29c:	01000034 	movhi	r4,0
     2a0:	2109c604 	addi	r4,r4,10008
				alt_printf("%c", (char)r[j]);
		}
}

int main()
{
     2a4:	dfc00815 	stw	ra,32(sp)
     2a8:	ddc00715 	stw	r23,28(sp)
     2ac:	dd800615 	stw	r22,24(sp)
     2b0:	dd400515 	stw	r21,20(sp)
     2b4:	dc800215 	stw	r18,8(sp)
     2b8:	dc400115 	stw	r17,4(sp)
     2bc:	dc000015 	stw	r16,0(sp)
     2c0:	dd000415 	stw	r20,16(sp)
     2c4:	dcc00315 	stw	r19,12(sp)
  alt_u64 freq, freq_step;
  alt_u32 gain, key;

  alt_putstr("DE0 Cyclone III - Software Defined AM Radio\n\n");
     2c8:	00025e00 	call	25e0 <alt_putstr>
  alt_putstr("Operation Keys\n");
     2cc:	01000034 	movhi	r4,0
     2d0:	2109d204 	addi	r4,r4,10056
     2d4:	00025e00 	call	25e0 <alt_putstr>
  alt_putstr("'1-9' frequency step (kHz)\n");
     2d8:	01000034 	movhi	r4,0
     2dc:	2109d604 	addi	r4,r4,10072
     2e0:	00025e00 	call	25e0 <alt_putstr>
  alt_putstr("'g' increment CIC gain (0-8)\n");
     2e4:	01000034 	movhi	r4,0
     2e8:	2109dd04 	addi	r4,r4,10100
     2ec:	00025e00 	call	25e0 <alt_putstr>
  alt_putstr("'+' increment frequency by step\n");
     2f0:	01000034 	movhi	r4,0
     2f4:	2109e504 	addi	r4,r4,10132
     2f8:	00025e00 	call	25e0 <alt_putstr>
  alt_putstr("'-' decrement frequency by step\n");
     2fc:	01000034 	movhi	r4,0
     300:	2109ee04 	addi	r4,r4,10168
     304:	00025e00 	call	25e0 <alt_putstr>

  freq = 1278000;
  gain = 4; // 0-15 range
     308:	04400104 	movi	r17,4
  freq_step = 9;
     30c:	05400244 	movi	r21,9
  alt_putstr("'1-9' frequency step (kHz)\n");
  alt_putstr("'g' increment CIC gain (0-8)\n");
  alt_putstr("'+' increment frequency by step\n");
  alt_putstr("'-' decrement frequency by step\n");

  freq = 1278000;
     310:	04000534 	movhi	r16,20
     314:	84200c04 	addi	r16,r16,-32720
     318:	0025883a 	mov	r18,zero
	  alt_printf("\n");
	  alt_putstr("Gain = ");
	  print_dec((alt_u64)gain);
	  alt_printf("\n");

	  IOWR(PHASE_INCREMENT_BASE, 0, get_phase(freq));
     31c:	05802034 	movhi	r22,128
     320:	b5804404 	addi	r22,r22,272
	  IOWR(CIC_GAIN_BASE, 0, gain & 0xf);
     324:	05c02034 	movhi	r23,128
     328:	bdc04004 	addi	r23,r23,256
  gain = 4; // 0-15 range
  freq_step = 9;

  while (1) {

	  alt_putstr("FPGA PLL Frequency = ");
     32c:	01000034 	movhi	r4,0
     330:	2109f704 	addi	r4,r4,10204
     334:	00025e00 	call	25e0 <alt_putstr>
	  print_dec((alt_u64)PLL_FREQ);
     338:	000b883a 	mov	r5,zero
     33c:	01017db4 	movhi	r4,1526
     340:	21384004 	addi	r4,r4,-7936
     344:	000012c0 	call	12c <print_dec>
	  alt_printf("\n");
     348:	01000034 	movhi	r4,0
     34c:	2109d104 	addi	r4,r4,10052
     350:	00024240 	call	2424 <alt_printf>
	  alt_putstr("Frequency = ");
     354:	01000034 	movhi	r4,0
     358:	2109fd04 	addi	r4,r4,10228
     35c:	00025e00 	call	25e0 <alt_putstr>
	  print_dec(freq);
     360:	900b883a 	mov	r5,r18
     364:	8009883a 	mov	r4,r16
     368:	000012c0 	call	12c <print_dec>
	  alt_printf("\n");
     36c:	01000034 	movhi	r4,0
     370:	2109d104 	addi	r4,r4,10052
     374:	00024240 	call	2424 <alt_printf>
	  alt_putstr("Frequency Step = ");
     378:	01000034 	movhi	r4,0
     37c:	210a0104 	addi	r4,r4,10244
     380:	00025e00 	call	25e0 <alt_putstr>
	  print_dec((freq_step * 1000));
     384:	0180fa04 	movi	r6,1000
     388:	000f883a 	mov	r7,zero
     38c:	a809883a 	mov	r4,r21
     390:	000b883a 	mov	r5,zero
     394:	00004680 	call	468 <__muldi3>
     398:	180b883a 	mov	r5,r3
     39c:	1009883a 	mov	r4,r2
     3a0:	1829883a 	mov	r20,r3
     3a4:	1027883a 	mov	r19,r2
     3a8:	000012c0 	call	12c <print_dec>
	  alt_printf("\n");
     3ac:	01000034 	movhi	r4,0
     3b0:	2109d104 	addi	r4,r4,10052
     3b4:	00024240 	call	2424 <alt_printf>
	  alt_putstr("Gain = ");
     3b8:	01000034 	movhi	r4,0
     3bc:	210a0604 	addi	r4,r4,10264
     3c0:	00025e00 	call	25e0 <alt_putstr>
	  print_dec((alt_u64)gain);
     3c4:	000b883a 	mov	r5,zero
     3c8:	8809883a 	mov	r4,r17
     3cc:	000012c0 	call	12c <print_dec>
	  alt_printf("\n");
     3d0:	01000034 	movhi	r4,0
     3d4:	2109d104 	addi	r4,r4,10052
     3d8:	00024240 	call	2424 <alt_printf>

	  IOWR(PHASE_INCREMENT_BASE, 0, get_phase(freq));
     3dc:	8009883a 	mov	r4,r16
     3e0:	00000a00 	call	a0 <get_phase>
     3e4:	b0800035 	stwio	r2,0(r22)
	  IOWR(CIC_GAIN_BASE, 0, gain & 0xf);
     3e8:	888003cc 	andi	r2,r17,15
     3ec:	b8800035 	stwio	r2,0(r23)
      
      key = alt_getchar();
     3f0:	00022b00 	call	22b0 <alt_getchar>
     3f4:	100d883a 	mov	r6,r2

      if (key == '+') freq = freq + (freq_step * 1000);
     3f8:	00800ac4 	movi	r2,43
     3fc:	3080061e 	bne	r6,r2,418 <main+0x180>
     400:	84e7883a 	add	r19,r16,r19
     404:	9c05803a 	cmpltu	r2,r19,r16
     408:	9525883a 	add	r18,r18,r20
     40c:	9821883a 	mov	r16,r19
     410:	14a5883a 	add	r18,r2,r18
     414:	00000f06 	br	454 <main+0x1bc>
      if (key == '-') freq = freq - (freq_step * 1000);
     418:	00800b44 	movi	r2,45
     41c:	3080061e 	bne	r6,r2,438 <main+0x1a0>
     420:	84e7c83a 	sub	r19,r16,r19
     424:	84c5803a 	cmpltu	r2,r16,r19
     428:	9525c83a 	sub	r18,r18,r20
     42c:	9821883a 	mov	r16,r19
     430:	90a5c83a 	sub	r18,r18,r2
     434:	00000706 	br	454 <main+0x1bc>
      if (key == 'g') {
     438:	008019c4 	movi	r2,103
     43c:	3080051e 	bne	r6,r2,454 <main+0x1bc>
		  if (gain == 8)
     440:	00800204 	movi	r2,8
     444:	88800226 	beq	r17,r2,450 <main+0x1b8>
			  gain = 0;
		  else
			  gain = gain + 1;
     448:	8c400044 	addi	r17,r17,1
     44c:	00000106 	br	454 <main+0x1bc>

      if (key == '+') freq = freq + (freq_step * 1000);
      if (key == '-') freq = freq - (freq_step * 1000);
      if (key == 'g') {
		  if (gain == 8)
			  gain = 0;
     450:	0023883a 	mov	r17,zero
		  else
			  gain = gain + 1;
      }
      if ((key >= '1') && (key <='9'))
     454:	30bff3c4 	addi	r2,r6,-49
     458:	00c00204 	movi	r3,8
     45c:	18bfb336 	bltu	r3,r2,32c <main+0x94>
    	  freq_step = (key - 0x30);
     460:	357ff404 	addi	r21,r6,-48
     464:	003fb106 	br	32c <main+0x94>

00000468 <__muldi3>:
     468:	defff604 	addi	sp,sp,-40
     46c:	dd400515 	stw	r21,20(sp)
     470:	dd000415 	stw	r20,16(sp)
     474:	257fffcc 	andi	r21,r4,65535
     478:	353fffcc 	andi	r20,r6,65535
     47c:	dcc00315 	stw	r19,12(sp)
     480:	3026d43a 	srli	r19,r6,16
     484:	dd800615 	stw	r22,24(sp)
     488:	dc800215 	stw	r18,8(sp)
     48c:	dc400115 	stw	r17,4(sp)
     490:	2024d43a 	srli	r18,r4,16
     494:	2023883a 	mov	r17,r4
     498:	282d883a 	mov	r22,r5
     49c:	a009883a 	mov	r4,r20
     4a0:	a80b883a 	mov	r5,r21
     4a4:	dfc00915 	stw	ra,36(sp)
     4a8:	df000815 	stw	fp,32(sp)
     4ac:	ddc00715 	stw	r23,28(sp)
     4b0:	3839883a 	mov	fp,r7
     4b4:	dc000015 	stw	r16,0(sp)
     4b8:	3021883a 	mov	r16,r6
     4bc:	0001c380 	call	1c38 <__mulsi3>
     4c0:	a80b883a 	mov	r5,r21
     4c4:	9809883a 	mov	r4,r19
     4c8:	102f883a 	mov	r23,r2
     4cc:	0001c380 	call	1c38 <__mulsi3>
     4d0:	a009883a 	mov	r4,r20
     4d4:	900b883a 	mov	r5,r18
     4d8:	102b883a 	mov	r21,r2
     4dc:	0001c380 	call	1c38 <__mulsi3>
     4e0:	9809883a 	mov	r4,r19
     4e4:	900b883a 	mov	r5,r18
     4e8:	1029883a 	mov	r20,r2
     4ec:	0001c380 	call	1c38 <__mulsi3>
     4f0:	1007883a 	mov	r3,r2
     4f4:	b804d43a 	srli	r2,r23,16
     4f8:	a549883a 	add	r4,r20,r21
     4fc:	2089883a 	add	r4,r4,r2
     500:	2500022e 	bgeu	r4,r20,50c <__muldi3+0xa4>
     504:	00800074 	movhi	r2,1
     508:	1887883a 	add	r3,r3,r2
     50c:	200cd43a 	srli	r6,r4,16
     510:	2004943a 	slli	r2,r4,16
     514:	e00b883a 	mov	r5,fp
     518:	8809883a 	mov	r4,r17
     51c:	bdffffcc 	andi	r23,r23,65535
     520:	19a3883a 	add	r17,r3,r6
     524:	15ef883a 	add	r23,r2,r23
     528:	0001c380 	call	1c38 <__mulsi3>
     52c:	8009883a 	mov	r4,r16
     530:	b00b883a 	mov	r5,r22
     534:	1025883a 	mov	r18,r2
     538:	0001c380 	call	1c38 <__mulsi3>
     53c:	9085883a 	add	r2,r18,r2
     540:	1447883a 	add	r3,r2,r17
     544:	b805883a 	mov	r2,r23
     548:	dfc00917 	ldw	ra,36(sp)
     54c:	df000817 	ldw	fp,32(sp)
     550:	ddc00717 	ldw	r23,28(sp)
     554:	dd800617 	ldw	r22,24(sp)
     558:	dd400517 	ldw	r21,20(sp)
     55c:	dd000417 	ldw	r20,16(sp)
     560:	dcc00317 	ldw	r19,12(sp)
     564:	dc800217 	ldw	r18,8(sp)
     568:	dc400117 	ldw	r17,4(sp)
     56c:	dc000017 	ldw	r16,0(sp)
     570:	dec00a04 	addi	sp,sp,40
     574:	f800283a 	ret

00000578 <__udivdi3>:
     578:	defff504 	addi	sp,sp,-44
     57c:	dd000515 	stw	r20,20(sp)
     580:	dcc00415 	stw	r19,16(sp)
     584:	dc800315 	stw	r18,12(sp)
     588:	dc400215 	stw	r17,8(sp)
     58c:	dc000115 	stw	r16,4(sp)
     590:	dfc00a15 	stw	ra,40(sp)
     594:	df000915 	stw	fp,36(sp)
     598:	ddc00815 	stw	r23,32(sp)
     59c:	dd800715 	stw	r22,28(sp)
     5a0:	dd400615 	stw	r21,24(sp)
     5a4:	2025883a 	mov	r18,r4
     5a8:	2823883a 	mov	r17,r5
     5ac:	3021883a 	mov	r16,r6
     5b0:	2027883a 	mov	r19,r4
     5b4:	2829883a 	mov	r20,r5
     5b8:	3800451e 	bne	r7,zero,6d0 <__udivdi3+0x158>
     5bc:	2980652e 	bgeu	r5,r6,754 <__udivdi3+0x1dc>
     5c0:	00bfffd4 	movui	r2,65535
     5c4:	1180b436 	bltu	r2,r6,898 <__udivdi3+0x320>
     5c8:	00803fc4 	movi	r2,255
     5cc:	11816636 	bltu	r2,r6,b68 <__udivdi3+0x5f0>
     5d0:	0005883a 	mov	r2,zero
     5d4:	0007883a 	mov	r3,zero
     5d8:	3084d83a 	srl	r2,r6,r2
     5dc:	01000034 	movhi	r4,0
     5e0:	210a1104 	addi	r4,r4,10308
     5e4:	2085883a 	add	r2,r4,r2
     5e8:	10800003 	ldbu	r2,0(r2)
     5ec:	10c7883a 	add	r3,r2,r3
     5f0:	00800804 	movi	r2,32
     5f4:	10c5c83a 	sub	r2,r2,r3
     5f8:	10000526 	beq	r2,zero,610 <__udivdi3+0x98>
     5fc:	88a2983a 	sll	r17,r17,r2
     600:	90c6d83a 	srl	r3,r18,r3
     604:	30a0983a 	sll	r16,r6,r2
     608:	90a6983a 	sll	r19,r18,r2
     60c:	88e8b03a 	or	r20,r17,r3
     610:	8022d43a 	srli	r17,r16,16
     614:	a009883a 	mov	r4,r20
     618:	857fffcc 	andi	r21,r16,65535
     61c:	880b883a 	mov	r5,r17
     620:	0001c300 	call	1c30 <__umodsi3>
     624:	a009883a 	mov	r4,r20
     628:	880b883a 	mov	r5,r17
     62c:	102d883a 	mov	r22,r2
     630:	0001c280 	call	1c28 <__udivsi3>
     634:	1009883a 	mov	r4,r2
     638:	a80b883a 	mov	r5,r21
     63c:	1025883a 	mov	r18,r2
     640:	0001c380 	call	1c38 <__mulsi3>
     644:	1009883a 	mov	r4,r2
     648:	b006943a 	slli	r3,r22,16
     64c:	9804d43a 	srli	r2,r19,16
     650:	1886b03a 	or	r3,r3,r2
     654:	1900052e 	bgeu	r3,r4,66c <__udivdi3+0xf4>
     658:	1c07883a 	add	r3,r3,r16
     65c:	90bfffc4 	addi	r2,r18,-1
     660:	1c000136 	bltu	r3,r16,668 <__udivdi3+0xf0>
     664:	19015536 	bltu	r3,r4,bbc <__udivdi3+0x644>
     668:	1025883a 	mov	r18,r2
     66c:	1929c83a 	sub	r20,r3,r4
     670:	880b883a 	mov	r5,r17
     674:	a009883a 	mov	r4,r20
     678:	0001c300 	call	1c30 <__umodsi3>
     67c:	102d883a 	mov	r22,r2
     680:	880b883a 	mov	r5,r17
     684:	a009883a 	mov	r4,r20
     688:	b02c943a 	slli	r22,r22,16
     68c:	0001c280 	call	1c28 <__udivsi3>
     690:	1009883a 	mov	r4,r2
     694:	a80b883a 	mov	r5,r21
     698:	9cffffcc 	andi	r19,r19,65535
     69c:	1023883a 	mov	r17,r2
     6a0:	b4e6b03a 	or	r19,r22,r19
     6a4:	0001c380 	call	1c38 <__mulsi3>
     6a8:	9880052e 	bgeu	r19,r2,6c0 <__udivdi3+0x148>
     6ac:	9c27883a 	add	r19,r19,r16
     6b0:	88ffffc4 	addi	r3,r17,-1
     6b4:	9c011436 	bltu	r19,r16,b08 <__udivdi3+0x590>
     6b8:	9881132e 	bgeu	r19,r2,b08 <__udivdi3+0x590>
     6bc:	8c7fff84 	addi	r17,r17,-2
     6c0:	9004943a 	slli	r2,r18,16
     6c4:	0007883a 	mov	r3,zero
     6c8:	8884b03a 	or	r2,r17,r2
     6cc:	00001506 	br	724 <__udivdi3+0x1ac>
     6d0:	29c06a36 	bltu	r5,r7,87c <__udivdi3+0x304>
     6d4:	00bfffd4 	movui	r2,65535
     6d8:	11c06a2e 	bgeu	r2,r7,884 <__udivdi3+0x30c>
     6dc:	00804034 	movhi	r2,256
     6e0:	10bfffc4 	addi	r2,r2,-1
     6e4:	11c11436 	bltu	r2,r7,b38 <__udivdi3+0x5c0>
     6e8:	00c00404 	movi	r3,16
     6ec:	180b883a 	mov	r5,r3
     6f0:	38c6d83a 	srl	r3,r7,r3
     6f4:	01000034 	movhi	r4,0
     6f8:	210a1104 	addi	r4,r4,10308
     6fc:	04000804 	movi	r16,32
     700:	20c7883a 	add	r3,r4,r3
     704:	18800003 	ldbu	r2,0(r3)
     708:	1145883a 	add	r2,r2,r5
     70c:	80a1c83a 	sub	r16,r16,r2
     710:	80006e1e 	bne	r16,zero,8cc <__udivdi3+0x354>
     714:	0007883a 	mov	r3,zero
     718:	3c406a36 	bltu	r7,r17,8c4 <__udivdi3+0x34c>
     71c:	9180692e 	bgeu	r18,r6,8c4 <__udivdi3+0x34c>
     720:	0005883a 	mov	r2,zero
     724:	dfc00a17 	ldw	ra,40(sp)
     728:	df000917 	ldw	fp,36(sp)
     72c:	ddc00817 	ldw	r23,32(sp)
     730:	dd800717 	ldw	r22,28(sp)
     734:	dd400617 	ldw	r21,24(sp)
     738:	dd000517 	ldw	r20,20(sp)
     73c:	dcc00417 	ldw	r19,16(sp)
     740:	dc800317 	ldw	r18,12(sp)
     744:	dc400217 	ldw	r17,8(sp)
     748:	dc000117 	ldw	r16,4(sp)
     74c:	dec00b04 	addi	sp,sp,44
     750:	f800283a 	ret
     754:	3000041e 	bne	r6,zero,768 <__udivdi3+0x1f0>
     758:	01000044 	movi	r4,1
     75c:	000b883a 	mov	r5,zero
     760:	0001c280 	call	1c28 <__udivsi3>
     764:	1021883a 	mov	r16,r2
     768:	00bfffd4 	movui	r2,65535
     76c:	1400502e 	bgeu	r2,r16,8b0 <__udivdi3+0x338>
     770:	00804034 	movhi	r2,256
     774:	10bfffc4 	addi	r2,r2,-1
     778:	1400f536 	bltu	r2,r16,b50 <__udivdi3+0x5d8>
     77c:	00800404 	movi	r2,16
     780:	1007883a 	mov	r3,r2
     784:	8084d83a 	srl	r2,r16,r2
     788:	01000034 	movhi	r4,0
     78c:	210a1104 	addi	r4,r4,10308
     790:	2085883a 	add	r2,r4,r2
     794:	10800003 	ldbu	r2,0(r2)
     798:	10c7883a 	add	r3,r2,r3
     79c:	00800804 	movi	r2,32
     7a0:	10c5c83a 	sub	r2,r2,r3
     7a4:	1000a01e 	bne	r2,zero,a28 <__udivdi3+0x4b0>
     7a8:	8028d43a 	srli	r20,r16,16
     7ac:	8c23c83a 	sub	r17,r17,r16
     7b0:	857fffcc 	andi	r21,r16,65535
     7b4:	00c00044 	movi	r3,1
     7b8:	8809883a 	mov	r4,r17
     7bc:	a00b883a 	mov	r5,r20
     7c0:	d8c00015 	stw	r3,0(sp)
     7c4:	0001c300 	call	1c30 <__umodsi3>
     7c8:	8809883a 	mov	r4,r17
     7cc:	a00b883a 	mov	r5,r20
     7d0:	102d883a 	mov	r22,r2
     7d4:	0001c280 	call	1c28 <__udivsi3>
     7d8:	1009883a 	mov	r4,r2
     7dc:	a80b883a 	mov	r5,r21
     7e0:	1025883a 	mov	r18,r2
     7e4:	0001c380 	call	1c38 <__mulsi3>
     7e8:	1009883a 	mov	r4,r2
     7ec:	b00c943a 	slli	r6,r22,16
     7f0:	9804d43a 	srli	r2,r19,16
     7f4:	d8c00017 	ldw	r3,0(sp)
     7f8:	308cb03a 	or	r6,r6,r2
     7fc:	3100052e 	bgeu	r6,r4,814 <__udivdi3+0x29c>
     800:	340d883a 	add	r6,r6,r16
     804:	90bfffc4 	addi	r2,r18,-1
     808:	34000136 	bltu	r6,r16,810 <__udivdi3+0x298>
     80c:	3100e836 	bltu	r6,r4,bb0 <__udivdi3+0x638>
     810:	1025883a 	mov	r18,r2
     814:	3123c83a 	sub	r17,r6,r4
     818:	8809883a 	mov	r4,r17
     81c:	a00b883a 	mov	r5,r20
     820:	d8c00015 	stw	r3,0(sp)
     824:	0001c300 	call	1c30 <__umodsi3>
     828:	102d883a 	mov	r22,r2
     82c:	8809883a 	mov	r4,r17
     830:	a00b883a 	mov	r5,r20
     834:	b02c943a 	slli	r22,r22,16
     838:	0001c280 	call	1c28 <__udivsi3>
     83c:	1009883a 	mov	r4,r2
     840:	a80b883a 	mov	r5,r21
     844:	9cffffcc 	andi	r19,r19,65535
     848:	1023883a 	mov	r17,r2
     84c:	b4e6b03a 	or	r19,r22,r19
     850:	0001c380 	call	1c38 <__mulsi3>
     854:	d8c00017 	ldw	r3,0(sp)
     858:	9880052e 	bgeu	r19,r2,870 <__udivdi3+0x2f8>
     85c:	9c27883a 	add	r19,r19,r16
     860:	893fffc4 	addi	r4,r17,-1
     864:	9c00aa36 	bltu	r19,r16,b10 <__udivdi3+0x598>
     868:	9880a92e 	bgeu	r19,r2,b10 <__udivdi3+0x598>
     86c:	8c7fff84 	addi	r17,r17,-2
     870:	9004943a 	slli	r2,r18,16
     874:	8884b03a 	or	r2,r17,r2
     878:	003faa06 	br	724 <__udivdi3+0x1ac>
     87c:	0007883a 	mov	r3,zero
     880:	003fa706 	br	720 <__udivdi3+0x1a8>
     884:	00803fc4 	movi	r2,255
     888:	11c0ae36 	bltu	r2,r7,b44 <__udivdi3+0x5cc>
     88c:	0007883a 	mov	r3,zero
     890:	000b883a 	mov	r5,zero
     894:	003f9606 	br	6f0 <__udivdi3+0x178>
     898:	00804034 	movhi	r2,256
     89c:	10bfffc4 	addi	r2,r2,-1
     8a0:	1180ae36 	bltu	r2,r6,b5c <__udivdi3+0x5e4>
     8a4:	00800404 	movi	r2,16
     8a8:	1007883a 	mov	r3,r2
     8ac:	003f4a06 	br	5d8 <__udivdi3+0x60>
     8b0:	00803fc4 	movi	r2,255
     8b4:	1400af36 	bltu	r2,r16,b74 <__udivdi3+0x5fc>
     8b8:	0005883a 	mov	r2,zero
     8bc:	0007883a 	mov	r3,zero
     8c0:	003fb006 	br	784 <__udivdi3+0x20c>
     8c4:	00800044 	movi	r2,1
     8c8:	003f9606 	br	724 <__udivdi3+0x1ac>
     8cc:	3c0e983a 	sll	r7,r7,r16
     8d0:	3086d83a 	srl	r3,r6,r2
     8d4:	88aed83a 	srl	r23,r17,r2
     8d8:	9084d83a 	srl	r2,r18,r2
     8dc:	38e6b03a 	or	r19,r7,r3
     8e0:	9828d43a 	srli	r20,r19,16
     8e4:	8c22983a 	sll	r17,r17,r16
     8e8:	b809883a 	mov	r4,r23
     8ec:	a00b883a 	mov	r5,r20
     8f0:	342a983a 	sll	r21,r6,r16
     8f4:	88a2b03a 	or	r17,r17,r2
     8f8:	0001c300 	call	1c30 <__umodsi3>
     8fc:	b809883a 	mov	r4,r23
     900:	a00b883a 	mov	r5,r20
     904:	1039883a 	mov	fp,r2
     908:	9dbfffcc 	andi	r22,r19,65535
     90c:	0001c280 	call	1c28 <__udivsi3>
     910:	1009883a 	mov	r4,r2
     914:	b00b883a 	mov	r5,r22
     918:	102f883a 	mov	r23,r2
     91c:	0001c380 	call	1c38 <__mulsi3>
     920:	1009883a 	mov	r4,r2
     924:	e00e943a 	slli	r7,fp,16
     928:	8804d43a 	srli	r2,r17,16
     92c:	388eb03a 	or	r7,r7,r2
     930:	3900042e 	bgeu	r7,r4,944 <__udivdi3+0x3cc>
     934:	3ccf883a 	add	r7,r7,r19
     938:	b8bfffc4 	addi	r2,r23,-1
     93c:	3cc0942e 	bgeu	r7,r19,b90 <__udivdi3+0x618>
     940:	102f883a 	mov	r23,r2
     944:	3939c83a 	sub	fp,r7,r4
     948:	a00b883a 	mov	r5,r20
     94c:	e009883a 	mov	r4,fp
     950:	0001c300 	call	1c30 <__umodsi3>
     954:	a00b883a 	mov	r5,r20
     958:	e009883a 	mov	r4,fp
     95c:	d8800015 	stw	r2,0(sp)
     960:	0001c280 	call	1c28 <__udivsi3>
     964:	1009883a 	mov	r4,r2
     968:	b00b883a 	mov	r5,r22
     96c:	1029883a 	mov	r20,r2
     970:	0001c380 	call	1c38 <__mulsi3>
     974:	d8c00017 	ldw	r3,0(sp)
     978:	8c7fffcc 	andi	r17,r17,65535
     97c:	1806943a 	slli	r3,r3,16
     980:	1c46b03a 	or	r3,r3,r17
     984:	1880042e 	bgeu	r3,r2,998 <__udivdi3+0x420>
     988:	1cc7883a 	add	r3,r3,r19
     98c:	a13fffc4 	addi	r4,r20,-1
     990:	1cc07b2e 	bgeu	r3,r19,b80 <__udivdi3+0x608>
     994:	2029883a 	mov	r20,r4
     998:	b82e943a 	slli	r23,r23,16
     99c:	a822d43a 	srli	r17,r21,16
     9a0:	ad7fffcc 	andi	r21,r21,65535
     9a4:	a5e8b03a 	or	r20,r20,r23
     9a8:	a5bfffcc 	andi	r22,r20,65535
     9ac:	b009883a 	mov	r4,r22
     9b0:	a80b883a 	mov	r5,r21
     9b4:	18afc83a 	sub	r23,r3,r2
     9b8:	a026d43a 	srli	r19,r20,16
     9bc:	0001c380 	call	1c38 <__mulsi3>
     9c0:	b009883a 	mov	r4,r22
     9c4:	880b883a 	mov	r5,r17
     9c8:	1039883a 	mov	fp,r2
     9cc:	0001c380 	call	1c38 <__mulsi3>
     9d0:	a80b883a 	mov	r5,r21
     9d4:	9809883a 	mov	r4,r19
     9d8:	102d883a 	mov	r22,r2
     9dc:	0001c380 	call	1c38 <__mulsi3>
     9e0:	9809883a 	mov	r4,r19
     9e4:	880b883a 	mov	r5,r17
     9e8:	102b883a 	mov	r21,r2
     9ec:	0001c380 	call	1c38 <__mulsi3>
     9f0:	100b883a 	mov	r5,r2
     9f4:	e004d43a 	srli	r2,fp,16
     9f8:	ad89883a 	add	r4,r21,r22
     9fc:	2089883a 	add	r4,r4,r2
     a00:	2540022e 	bgeu	r4,r21,a0c <__udivdi3+0x494>
     a04:	00800074 	movhi	r2,1
     a08:	288b883a 	add	r5,r5,r2
     a0c:	2004d43a 	srli	r2,r4,16
     a10:	288b883a 	add	r5,r5,r2
     a14:	b9404536 	bltu	r23,r5,b2c <__udivdi3+0x5b4>
     a18:	b9403f26 	beq	r23,r5,b18 <__udivdi3+0x5a0>
     a1c:	a005883a 	mov	r2,r20
     a20:	0007883a 	mov	r3,zero
     a24:	003f3f06 	br	724 <__udivdi3+0x1ac>
     a28:	80a0983a 	sll	r16,r16,r2
     a2c:	88eed83a 	srl	r23,r17,r3
     a30:	90c6d83a 	srl	r3,r18,r3
     a34:	8028d43a 	srli	r20,r16,16
     a38:	88a2983a 	sll	r17,r17,r2
     a3c:	b809883a 	mov	r4,r23
     a40:	a00b883a 	mov	r5,r20
     a44:	88ecb03a 	or	r22,r17,r3
     a48:	90a6983a 	sll	r19,r18,r2
     a4c:	0001c300 	call	1c30 <__umodsi3>
     a50:	b809883a 	mov	r4,r23
     a54:	a00b883a 	mov	r5,r20
     a58:	1023883a 	mov	r17,r2
     a5c:	857fffcc 	andi	r21,r16,65535
     a60:	0001c280 	call	1c28 <__udivsi3>
     a64:	1009883a 	mov	r4,r2
     a68:	a80b883a 	mov	r5,r21
     a6c:	102f883a 	mov	r23,r2
     a70:	0001c380 	call	1c38 <__mulsi3>
     a74:	1009883a 	mov	r4,r2
     a78:	880a943a 	slli	r5,r17,16
     a7c:	b004d43a 	srli	r2,r22,16
     a80:	288ab03a 	or	r5,r5,r2
     a84:	2900062e 	bgeu	r5,r4,aa0 <__udivdi3+0x528>
     a88:	2c0b883a 	add	r5,r5,r16
     a8c:	b8bfffc4 	addi	r2,r23,-1
     a90:	2c004536 	bltu	r5,r16,ba8 <__udivdi3+0x630>
     a94:	2900442e 	bgeu	r5,r4,ba8 <__udivdi3+0x630>
     a98:	bdffff84 	addi	r23,r23,-2
     a9c:	2c0b883a 	add	r5,r5,r16
     aa0:	2925c83a 	sub	r18,r5,r4
     aa4:	9009883a 	mov	r4,r18
     aa8:	a00b883a 	mov	r5,r20
     aac:	0001c300 	call	1c30 <__umodsi3>
     ab0:	1023883a 	mov	r17,r2
     ab4:	9009883a 	mov	r4,r18
     ab8:	a00b883a 	mov	r5,r20
     abc:	8822943a 	slli	r17,r17,16
     ac0:	0001c280 	call	1c28 <__udivsi3>
     ac4:	1009883a 	mov	r4,r2
     ac8:	a80b883a 	mov	r5,r21
     acc:	b5bfffcc 	andi	r22,r22,65535
     ad0:	1025883a 	mov	r18,r2
     ad4:	8da2b03a 	or	r17,r17,r22
     ad8:	0001c380 	call	1c38 <__mulsi3>
     adc:	8880062e 	bgeu	r17,r2,af8 <__udivdi3+0x580>
     ae0:	8c23883a 	add	r17,r17,r16
     ae4:	90ffffc4 	addi	r3,r18,-1
     ae8:	8c002d36 	bltu	r17,r16,ba0 <__udivdi3+0x628>
     aec:	88802c2e 	bgeu	r17,r2,ba0 <__udivdi3+0x628>
     af0:	94bfff84 	addi	r18,r18,-2
     af4:	8c23883a 	add	r17,r17,r16
     af8:	b806943a 	slli	r3,r23,16
     afc:	88a3c83a 	sub	r17,r17,r2
     b00:	90c6b03a 	or	r3,r18,r3
     b04:	003f2c06 	br	7b8 <__udivdi3+0x240>
     b08:	1823883a 	mov	r17,r3
     b0c:	003eec06 	br	6c0 <__udivdi3+0x148>
     b10:	2023883a 	mov	r17,r4
     b14:	003f5606 	br	870 <__udivdi3+0x2f8>
     b18:	2008943a 	slli	r4,r4,16
     b1c:	9420983a 	sll	r16,r18,r16
     b20:	e73fffcc 	andi	fp,fp,65535
     b24:	2709883a 	add	r4,r4,fp
     b28:	813fbc2e 	bgeu	r16,r4,a1c <__udivdi3+0x4a4>
     b2c:	a0bfffc4 	addi	r2,r20,-1
     b30:	0007883a 	mov	r3,zero
     b34:	003efb06 	br	724 <__udivdi3+0x1ac>
     b38:	00c00604 	movi	r3,24
     b3c:	180b883a 	mov	r5,r3
     b40:	003eeb06 	br	6f0 <__udivdi3+0x178>
     b44:	00c00204 	movi	r3,8
     b48:	180b883a 	mov	r5,r3
     b4c:	003ee806 	br	6f0 <__udivdi3+0x178>
     b50:	00800604 	movi	r2,24
     b54:	1007883a 	mov	r3,r2
     b58:	003f0a06 	br	784 <__udivdi3+0x20c>
     b5c:	00800604 	movi	r2,24
     b60:	1007883a 	mov	r3,r2
     b64:	003e9c06 	br	5d8 <__udivdi3+0x60>
     b68:	00800204 	movi	r2,8
     b6c:	1007883a 	mov	r3,r2
     b70:	003e9906 	br	5d8 <__udivdi3+0x60>
     b74:	00800204 	movi	r2,8
     b78:	1007883a 	mov	r3,r2
     b7c:	003f0106 	br	784 <__udivdi3+0x20c>
     b80:	18bf842e 	bgeu	r3,r2,994 <__udivdi3+0x41c>
     b84:	a53fff84 	addi	r20,r20,-2
     b88:	1cc7883a 	add	r3,r3,r19
     b8c:	003f8206 	br	998 <__udivdi3+0x420>
     b90:	393f6b2e 	bgeu	r7,r4,940 <__udivdi3+0x3c8>
     b94:	bdffff84 	addi	r23,r23,-2
     b98:	3ccf883a 	add	r7,r7,r19
     b9c:	003f6906 	br	944 <__udivdi3+0x3cc>
     ba0:	1825883a 	mov	r18,r3
     ba4:	003fd406 	br	af8 <__udivdi3+0x580>
     ba8:	102f883a 	mov	r23,r2
     bac:	003fbc06 	br	aa0 <__udivdi3+0x528>
     bb0:	94bfff84 	addi	r18,r18,-2
     bb4:	340d883a 	add	r6,r6,r16
     bb8:	003f1606 	br	814 <__udivdi3+0x29c>
     bbc:	94bfff84 	addi	r18,r18,-2
     bc0:	1c07883a 	add	r3,r3,r16
     bc4:	003ea906 	br	66c <__udivdi3+0xf4>

00000bc8 <__umoddi3>:
     bc8:	defff304 	addi	sp,sp,-52
     bcc:	dd000715 	stw	r20,28(sp)
     bd0:	dcc00615 	stw	r19,24(sp)
     bd4:	dc800515 	stw	r18,20(sp)
     bd8:	dc400415 	stw	r17,16(sp)
     bdc:	dc000315 	stw	r16,12(sp)
     be0:	dfc00c15 	stw	ra,48(sp)
     be4:	df000b15 	stw	fp,44(sp)
     be8:	ddc00a15 	stw	r23,40(sp)
     bec:	dd800915 	stw	r22,36(sp)
     bf0:	dd400815 	stw	r21,32(sp)
     bf4:	2025883a 	mov	r18,r4
     bf8:	2823883a 	mov	r17,r5
     bfc:	3021883a 	mov	r16,r6
     c00:	2027883a 	mov	r19,r4
     c04:	2829883a 	mov	r20,r5
     c08:	38003a1e 	bne	r7,zero,cf4 <__umoddi3+0x12c>
     c0c:	2980522e 	bgeu	r5,r6,d58 <__umoddi3+0x190>
     c10:	00bfffd4 	movui	r2,65535
     c14:	1180a436 	bltu	r2,r6,ea8 <__umoddi3+0x2e0>
     c18:	00803fc4 	movi	r2,255
     c1c:	11816036 	bltu	r2,r6,11a0 <__umoddi3+0x5d8>
     c20:	0005883a 	mov	r2,zero
     c24:	0009883a 	mov	r4,zero
     c28:	3084d83a 	srl	r2,r6,r2
     c2c:	00c00034 	movhi	r3,0
     c30:	18ca1104 	addi	r3,r3,10308
     c34:	05400804 	movi	r21,32
     c38:	1885883a 	add	r2,r3,r2
     c3c:	10800003 	ldbu	r2,0(r2)
     c40:	1109883a 	add	r4,r2,r4
     c44:	a92bc83a 	sub	r21,r21,r4
     c48:	a8010e26 	beq	r21,zero,1084 <__umoddi3+0x4bc>
     c4c:	8d62983a 	sll	r17,r17,r21
     c50:	9108d83a 	srl	r4,r18,r4
     c54:	3560983a 	sll	r16,r6,r21
     c58:	9566983a 	sll	r19,r18,r21
     c5c:	8928b03a 	or	r20,r17,r4
     c60:	8022d43a 	srli	r17,r16,16
     c64:	a009883a 	mov	r4,r20
     c68:	84bfffcc 	andi	r18,r16,65535
     c6c:	880b883a 	mov	r5,r17
     c70:	0001c300 	call	1c30 <__umodsi3>
     c74:	a009883a 	mov	r4,r20
     c78:	880b883a 	mov	r5,r17
     c7c:	102d883a 	mov	r22,r2
     c80:	0001c280 	call	1c28 <__udivsi3>
     c84:	1009883a 	mov	r4,r2
     c88:	900b883a 	mov	r5,r18
     c8c:	0001c380 	call	1c38 <__mulsi3>
     c90:	1009883a 	mov	r4,r2
     c94:	b006943a 	slli	r3,r22,16
     c98:	9804d43a 	srli	r2,r19,16
     c9c:	1886b03a 	or	r3,r3,r2
     ca0:	1900042e 	bgeu	r3,r4,cb4 <__umoddi3+0xec>
     ca4:	1c07883a 	add	r3,r3,r16
     ca8:	1c000236 	bltu	r3,r16,cb4 <__umoddi3+0xec>
     cac:	1900012e 	bgeu	r3,r4,cb4 <__umoddi3+0xec>
     cb0:	1c07883a 	add	r3,r3,r16
     cb4:	1929c83a 	sub	r20,r3,r4
     cb8:	a009883a 	mov	r4,r20
     cbc:	880b883a 	mov	r5,r17
     cc0:	0001c300 	call	1c30 <__umodsi3>
     cc4:	102d883a 	mov	r22,r2
     cc8:	a009883a 	mov	r4,r20
     ccc:	880b883a 	mov	r5,r17
     cd0:	b02c943a 	slli	r22,r22,16
     cd4:	0001c280 	call	1c28 <__udivsi3>
     cd8:	1009883a 	mov	r4,r2
     cdc:	900b883a 	mov	r5,r18
     ce0:	9cffffcc 	andi	r19,r19,65535
     ce4:	0001c380 	call	1c38 <__mulsi3>
     ce8:	b4e6b03a 	or	r19,r22,r19
     cec:	9880572e 	bgeu	r19,r2,e4c <__umoddi3+0x284>
     cf0:	00005206 	br	e3c <__umoddi3+0x274>
     cf4:	29c05936 	bltu	r5,r7,e5c <__umoddi3+0x294>
     cf8:	00bfffd4 	movui	r2,65535
     cfc:	11c0652e 	bgeu	r2,r7,e94 <__umoddi3+0x2cc>
     d00:	00804034 	movhi	r2,256
     d04:	10bfffc4 	addi	r2,r2,-1
     d08:	11c11936 	bltu	r2,r7,1170 <__umoddi3+0x5a8>
     d0c:	00c00404 	movi	r3,16
     d10:	1827883a 	mov	r19,r3
     d14:	38c6d83a 	srl	r3,r7,r3
     d18:	01000034 	movhi	r4,0
     d1c:	210a1104 	addi	r4,r4,10308
     d20:	04000804 	movi	r16,32
     d24:	20c7883a 	add	r3,r4,r3
     d28:	18800003 	ldbu	r2,0(r3)
     d2c:	14e7883a 	add	r19,r2,r19
     d30:	84e1c83a 	sub	r16,r16,r19
     d34:	8000671e 	bne	r16,zero,ed4 <__umoddi3+0x30c>
     d38:	3c400136 	bltu	r7,r17,d40 <__umoddi3+0x178>
     d3c:	91812536 	bltu	r18,r6,11d4 <__umoddi3+0x60c>
     d40:	9185c83a 	sub	r2,r18,r6
     d44:	89e3c83a 	sub	r17,r17,r7
     d48:	90a5803a 	cmpltu	r18,r18,r2
     d4c:	8ca9c83a 	sub	r20,r17,r18
     d50:	a007883a 	mov	r3,r20
     d54:	00004306 	br	e64 <__umoddi3+0x29c>
     d58:	3000041e 	bne	r6,zero,d6c <__umoddi3+0x1a4>
     d5c:	01000044 	movi	r4,1
     d60:	000b883a 	mov	r5,zero
     d64:	0001c280 	call	1c28 <__udivsi3>
     d68:	1021883a 	mov	r16,r2
     d6c:	00bfffd4 	movui	r2,65535
     d70:	1400532e 	bgeu	r2,r16,ec0 <__umoddi3+0x2f8>
     d74:	00804034 	movhi	r2,256
     d78:	10bfffc4 	addi	r2,r2,-1
     d7c:	14010536 	bltu	r2,r16,1194 <__umoddi3+0x5cc>
     d80:	00800404 	movi	r2,16
     d84:	1007883a 	mov	r3,r2
     d88:	8084d83a 	srl	r2,r16,r2
     d8c:	01000034 	movhi	r4,0
     d90:	210a1104 	addi	r4,r4,10308
     d94:	05400804 	movi	r21,32
     d98:	2085883a 	add	r2,r4,r2
     d9c:	10800003 	ldbu	r2,0(r2)
     da0:	10c7883a 	add	r3,r2,r3
     da4:	a8ebc83a 	sub	r21,r21,r3
     da8:	a800b81e 	bne	r21,zero,108c <__umoddi3+0x4c4>
     dac:	8028d43a 	srli	r20,r16,16
     db0:	8c23c83a 	sub	r17,r17,r16
     db4:	85bfffcc 	andi	r22,r16,65535
     db8:	8809883a 	mov	r4,r17
     dbc:	a00b883a 	mov	r5,r20
     dc0:	0001c300 	call	1c30 <__umodsi3>
     dc4:	8809883a 	mov	r4,r17
     dc8:	a00b883a 	mov	r5,r20
     dcc:	1025883a 	mov	r18,r2
     dd0:	0001c280 	call	1c28 <__udivsi3>
     dd4:	1009883a 	mov	r4,r2
     dd8:	b00b883a 	mov	r5,r22
     ddc:	0001c380 	call	1c38 <__mulsi3>
     de0:	1009883a 	mov	r4,r2
     de4:	9006943a 	slli	r3,r18,16
     de8:	9804d43a 	srli	r2,r19,16
     dec:	1886b03a 	or	r3,r3,r2
     df0:	1900032e 	bgeu	r3,r4,e00 <__umoddi3+0x238>
     df4:	1c07883a 	add	r3,r3,r16
     df8:	1c000136 	bltu	r3,r16,e00 <__umoddi3+0x238>
     dfc:	1900f336 	bltu	r3,r4,11cc <__umoddi3+0x604>
     e00:	1923c83a 	sub	r17,r3,r4
     e04:	8809883a 	mov	r4,r17
     e08:	a00b883a 	mov	r5,r20
     e0c:	0001c300 	call	1c30 <__umodsi3>
     e10:	102f883a 	mov	r23,r2
     e14:	8809883a 	mov	r4,r17
     e18:	a00b883a 	mov	r5,r20
     e1c:	b82e943a 	slli	r23,r23,16
     e20:	0001c280 	call	1c28 <__udivsi3>
     e24:	1009883a 	mov	r4,r2
     e28:	b00b883a 	mov	r5,r22
     e2c:	9cffffcc 	andi	r19,r19,65535
     e30:	0001c380 	call	1c38 <__mulsi3>
     e34:	bce6b03a 	or	r19,r23,r19
     e38:	9880042e 	bgeu	r19,r2,e4c <__umoddi3+0x284>
     e3c:	9c27883a 	add	r19,r19,r16
     e40:	9c000236 	bltu	r19,r16,e4c <__umoddi3+0x284>
     e44:	9880012e 	bgeu	r19,r2,e4c <__umoddi3+0x284>
     e48:	9c27883a 	add	r19,r19,r16
     e4c:	9885c83a 	sub	r2,r19,r2
     e50:	1544d83a 	srl	r2,r2,r21
     e54:	0007883a 	mov	r3,zero
     e58:	00000206 	br	e64 <__umoddi3+0x29c>
     e5c:	2005883a 	mov	r2,r4
     e60:	2807883a 	mov	r3,r5
     e64:	dfc00c17 	ldw	ra,48(sp)
     e68:	df000b17 	ldw	fp,44(sp)
     e6c:	ddc00a17 	ldw	r23,40(sp)
     e70:	dd800917 	ldw	r22,36(sp)
     e74:	dd400817 	ldw	r21,32(sp)
     e78:	dd000717 	ldw	r20,28(sp)
     e7c:	dcc00617 	ldw	r19,24(sp)
     e80:	dc800517 	ldw	r18,20(sp)
     e84:	dc400417 	ldw	r17,16(sp)
     e88:	dc000317 	ldw	r16,12(sp)
     e8c:	dec00d04 	addi	sp,sp,52
     e90:	f800283a 	ret
     e94:	00803fc4 	movi	r2,255
     e98:	11c0b236 	bltu	r2,r7,1164 <__umoddi3+0x59c>
     e9c:	0007883a 	mov	r3,zero
     ea0:	0027883a 	mov	r19,zero
     ea4:	003f9b06 	br	d14 <__umoddi3+0x14c>
     ea8:	00804034 	movhi	r2,256
     eac:	10bfffc4 	addi	r2,r2,-1
     eb0:	1180b236 	bltu	r2,r6,117c <__umoddi3+0x5b4>
     eb4:	00800404 	movi	r2,16
     eb8:	1009883a 	mov	r4,r2
     ebc:	003f5a06 	br	c28 <__umoddi3+0x60>
     ec0:	00803fc4 	movi	r2,255
     ec4:	1400b036 	bltu	r2,r16,1188 <__umoddi3+0x5c0>
     ec8:	0005883a 	mov	r2,zero
     ecc:	0007883a 	mov	r3,zero
     ed0:	003fad06 	br	d88 <__umoddi3+0x1c0>
     ed4:	34c4d83a 	srl	r2,r6,r19
     ed8:	3c0e983a 	sll	r7,r7,r16
     edc:	8cf8d83a 	srl	fp,r17,r19
     ee0:	8c22983a 	sll	r17,r17,r16
     ee4:	38a8b03a 	or	r20,r7,r2
     ee8:	a02ad43a 	srli	r21,r20,16
     eec:	94c4d83a 	srl	r2,r18,r19
     ef0:	e009883a 	mov	r4,fp
     ef4:	a80b883a 	mov	r5,r21
     ef8:	342c983a 	sll	r22,r6,r16
     efc:	88a2b03a 	or	r17,r17,r2
     f00:	0001c300 	call	1c30 <__umodsi3>
     f04:	e009883a 	mov	r4,fp
     f08:	a80b883a 	mov	r5,r21
     f0c:	a5ffffcc 	andi	r23,r20,65535
     f10:	d8800215 	stw	r2,8(sp)
     f14:	0001c280 	call	1c28 <__udivsi3>
     f18:	1009883a 	mov	r4,r2
     f1c:	b80b883a 	mov	r5,r23
     f20:	1039883a 	mov	fp,r2
     f24:	0001c380 	call	1c38 <__mulsi3>
     f28:	d8c00217 	ldw	r3,8(sp)
     f2c:	1009883a 	mov	r4,r2
     f30:	8804d43a 	srli	r2,r17,16
     f34:	1806943a 	slli	r3,r3,16
     f38:	9424983a 	sll	r18,r18,r16
     f3c:	1886b03a 	or	r3,r3,r2
     f40:	1900042e 	bgeu	r3,r4,f54 <__umoddi3+0x38c>
     f44:	1d07883a 	add	r3,r3,r20
     f48:	e0bfffc4 	addi	r2,fp,-1
     f4c:	1d009b2e 	bgeu	r3,r20,11bc <__umoddi3+0x5f4>
     f50:	1039883a 	mov	fp,r2
     f54:	1907c83a 	sub	r3,r3,r4
     f58:	1809883a 	mov	r4,r3
     f5c:	a80b883a 	mov	r5,r21
     f60:	d8c00215 	stw	r3,8(sp)
     f64:	0001c300 	call	1c30 <__umodsi3>
     f68:	d8c00217 	ldw	r3,8(sp)
     f6c:	a80b883a 	mov	r5,r21
     f70:	d8800015 	stw	r2,0(sp)
     f74:	1809883a 	mov	r4,r3
     f78:	0001c280 	call	1c28 <__udivsi3>
     f7c:	1009883a 	mov	r4,r2
     f80:	b80b883a 	mov	r5,r23
     f84:	102b883a 	mov	r21,r2
     f88:	0001c380 	call	1c38 <__mulsi3>
     f8c:	d9c00017 	ldw	r7,0(sp)
     f90:	8c7fffcc 	andi	r17,r17,65535
     f94:	380e943a 	slli	r7,r7,16
     f98:	3c4eb03a 	or	r7,r7,r17
     f9c:	3880042e 	bgeu	r7,r2,fb0 <__umoddi3+0x3e8>
     fa0:	3d0f883a 	add	r7,r7,r20
     fa4:	a8ffffc4 	addi	r3,r21,-1
     fa8:	3d00802e 	bgeu	r7,r20,11ac <__umoddi3+0x5e4>
     fac:	182b883a 	mov	r21,r3
     fb0:	e038943a 	slli	fp,fp,16
     fb4:	b010d43a 	srli	r8,r22,16
     fb8:	b1bfffcc 	andi	r6,r22,65535
     fbc:	af2ab03a 	or	r21,r21,fp
     fc0:	a82ed43a 	srli	r23,r21,16
     fc4:	ad7fffcc 	andi	r21,r21,65535
     fc8:	300b883a 	mov	r5,r6
     fcc:	a809883a 	mov	r4,r21
     fd0:	38a3c83a 	sub	r17,r7,r2
     fd4:	d9800115 	stw	r6,4(sp)
     fd8:	da000015 	stw	r8,0(sp)
     fdc:	0001c380 	call	1c38 <__mulsi3>
     fe0:	da000017 	ldw	r8,0(sp)
     fe4:	a809883a 	mov	r4,r21
     fe8:	1039883a 	mov	fp,r2
     fec:	400b883a 	mov	r5,r8
     ff0:	da000215 	stw	r8,8(sp)
     ff4:	0001c380 	call	1c38 <__mulsi3>
     ff8:	d9800117 	ldw	r6,4(sp)
     ffc:	b809883a 	mov	r4,r23
    1000:	d8800015 	stw	r2,0(sp)
    1004:	300b883a 	mov	r5,r6
    1008:	0001c380 	call	1c38 <__mulsi3>
    100c:	d8c00217 	ldw	r3,8(sp)
    1010:	b809883a 	mov	r4,r23
    1014:	102b883a 	mov	r21,r2
    1018:	180b883a 	mov	r5,r3
    101c:	0001c380 	call	1c38 <__mulsi3>
    1020:	d9c00017 	ldw	r7,0(sp)
    1024:	1007883a 	mov	r3,r2
    1028:	e004d43a 	srli	r2,fp,16
    102c:	a9c9883a 	add	r4,r21,r7
    1030:	2089883a 	add	r4,r4,r2
    1034:	2540022e 	bgeu	r4,r21,1040 <__umoddi3+0x478>
    1038:	00800074 	movhi	r2,1
    103c:	1887883a 	add	r3,r3,r2
    1040:	2004d43a 	srli	r2,r4,16
    1044:	2008943a 	slli	r4,r4,16
    1048:	e73fffcc 	andi	fp,fp,65535
    104c:	1887883a 	add	r3,r3,r2
    1050:	2709883a 	add	r4,r4,fp
    1054:	88c03d36 	bltu	r17,r3,114c <__umoddi3+0x584>
    1058:	88c06126 	beq	r17,r3,11e0 <__umoddi3+0x618>
    105c:	88c7c83a 	sub	r3,r17,r3
    1060:	202d883a 	mov	r22,r4
    1064:	95adc83a 	sub	r22,r18,r22
    1068:	95a5803a 	cmpltu	r18,r18,r22
    106c:	1c87c83a 	sub	r3,r3,r18
    1070:	1cc4983a 	sll	r2,r3,r19
    1074:	b42cd83a 	srl	r22,r22,r16
    1078:	1c06d83a 	srl	r3,r3,r16
    107c:	1584b03a 	or	r2,r2,r22
    1080:	003f7806 	br	e64 <__umoddi3+0x29c>
    1084:	002b883a 	mov	r21,zero
    1088:	003ef506 	br	c60 <__umoddi3+0x98>
    108c:	8560983a 	sll	r16,r16,r21
    1090:	88e6d83a 	srl	r19,r17,r3
    1094:	90c6d83a 	srl	r3,r18,r3
    1098:	8028d43a 	srli	r20,r16,16
    109c:	8d62983a 	sll	r17,r17,r21
    10a0:	9809883a 	mov	r4,r19
    10a4:	a00b883a 	mov	r5,r20
    10a8:	88eeb03a 	or	r23,r17,r3
    10ac:	0001c300 	call	1c30 <__umodsi3>
    10b0:	9809883a 	mov	r4,r19
    10b4:	a00b883a 	mov	r5,r20
    10b8:	1023883a 	mov	r17,r2
    10bc:	85bfffcc 	andi	r22,r16,65535
    10c0:	0001c280 	call	1c28 <__udivsi3>
    10c4:	1009883a 	mov	r4,r2
    10c8:	b00b883a 	mov	r5,r22
    10cc:	0001c380 	call	1c38 <__mulsi3>
    10d0:	1007883a 	mov	r3,r2
    10d4:	8808943a 	slli	r4,r17,16
    10d8:	b804d43a 	srli	r2,r23,16
    10dc:	9566983a 	sll	r19,r18,r21
    10e0:	2088b03a 	or	r4,r4,r2
    10e4:	20c0042e 	bgeu	r4,r3,10f8 <__umoddi3+0x530>
    10e8:	2409883a 	add	r4,r4,r16
    10ec:	24000236 	bltu	r4,r16,10f8 <__umoddi3+0x530>
    10f0:	20c0012e 	bgeu	r4,r3,10f8 <__umoddi3+0x530>
    10f4:	2409883a 	add	r4,r4,r16
    10f8:	20e5c83a 	sub	r18,r4,r3
    10fc:	9009883a 	mov	r4,r18
    1100:	a00b883a 	mov	r5,r20
    1104:	0001c300 	call	1c30 <__umodsi3>
    1108:	1023883a 	mov	r17,r2
    110c:	9009883a 	mov	r4,r18
    1110:	a00b883a 	mov	r5,r20
    1114:	8822943a 	slli	r17,r17,16
    1118:	0001c280 	call	1c28 <__udivsi3>
    111c:	1009883a 	mov	r4,r2
    1120:	b00b883a 	mov	r5,r22
    1124:	bdffffcc 	andi	r23,r23,65535
    1128:	0001c380 	call	1c38 <__mulsi3>
    112c:	8de2b03a 	or	r17,r17,r23
    1130:	8880042e 	bgeu	r17,r2,1144 <__umoddi3+0x57c>
    1134:	8c23883a 	add	r17,r17,r16
    1138:	8c000236 	bltu	r17,r16,1144 <__umoddi3+0x57c>
    113c:	8880012e 	bgeu	r17,r2,1144 <__umoddi3+0x57c>
    1140:	8c23883a 	add	r17,r17,r16
    1144:	88a3c83a 	sub	r17,r17,r2
    1148:	003f1b06 	br	db8 <__umoddi3+0x1f0>
    114c:	25adc83a 	sub	r22,r4,r22
    1150:	1d07c83a 	sub	r3,r3,r20
    1154:	2589803a 	cmpltu	r4,r4,r22
    1158:	1907c83a 	sub	r3,r3,r4
    115c:	88c7c83a 	sub	r3,r17,r3
    1160:	003fc006 	br	1064 <__umoddi3+0x49c>
    1164:	00c00204 	movi	r3,8
    1168:	1827883a 	mov	r19,r3
    116c:	003ee906 	br	d14 <__umoddi3+0x14c>
    1170:	00c00604 	movi	r3,24
    1174:	1827883a 	mov	r19,r3
    1178:	003ee606 	br	d14 <__umoddi3+0x14c>
    117c:	00800604 	movi	r2,24
    1180:	1009883a 	mov	r4,r2
    1184:	003ea806 	br	c28 <__umoddi3+0x60>
    1188:	00800204 	movi	r2,8
    118c:	1007883a 	mov	r3,r2
    1190:	003efd06 	br	d88 <__umoddi3+0x1c0>
    1194:	00800604 	movi	r2,24
    1198:	1007883a 	mov	r3,r2
    119c:	003efa06 	br	d88 <__umoddi3+0x1c0>
    11a0:	00800204 	movi	r2,8
    11a4:	1009883a 	mov	r4,r2
    11a8:	003e9f06 	br	c28 <__umoddi3+0x60>
    11ac:	38bf7f2e 	bgeu	r7,r2,fac <__umoddi3+0x3e4>
    11b0:	ad7fff84 	addi	r21,r21,-2
    11b4:	3d0f883a 	add	r7,r7,r20
    11b8:	003f7d06 	br	fb0 <__umoddi3+0x3e8>
    11bc:	193f642e 	bgeu	r3,r4,f50 <__umoddi3+0x388>
    11c0:	e73fff84 	addi	fp,fp,-2
    11c4:	1d07883a 	add	r3,r3,r20
    11c8:	003f6206 	br	f54 <__umoddi3+0x38c>
    11cc:	1c07883a 	add	r3,r3,r16
    11d0:	003f0b06 	br	e00 <__umoddi3+0x238>
    11d4:	9005883a 	mov	r2,r18
    11d8:	a007883a 	mov	r3,r20
    11dc:	003f2106 	br	e64 <__umoddi3+0x29c>
    11e0:	913fda36 	bltu	r18,r4,114c <__umoddi3+0x584>
    11e4:	202d883a 	mov	r22,r4
    11e8:	0007883a 	mov	r3,zero
    11ec:	003f9d06 	br	1064 <__umoddi3+0x49c>

000011f0 <__mulsf3>:
    11f0:	defff104 	addi	sp,sp,-60
    11f4:	d9000d15 	stw	r4,52(sp)
    11f8:	d9400c15 	stw	r5,48(sp)
    11fc:	d9000d04 	addi	r4,sp,52
    1200:	d9400804 	addi	r5,sp,32
    1204:	dfc00e15 	stw	ra,56(sp)
    1208:	0001e380 	call	1e38 <__unpack_f>
    120c:	d9000c04 	addi	r4,sp,48
    1210:	d9400404 	addi	r5,sp,16
    1214:	0001e380 	call	1e38 <__unpack_f>
    1218:	d8c00817 	ldw	r3,32(sp)
    121c:	00800044 	movi	r2,1
    1220:	10c00936 	bltu	r2,r3,1248 <__mulsf3+0x58>
    1224:	d8c00917 	ldw	r3,36(sp)
    1228:	d8800517 	ldw	r2,20(sp)
    122c:	d9000804 	addi	r4,sp,32
    1230:	1884c03a 	cmpne	r2,r3,r2
    1234:	d8800915 	stw	r2,36(sp)
    1238:	0001d0c0 	call	1d0c <__pack_f>
    123c:	dfc00e17 	ldw	ra,56(sp)
    1240:	dec00f04 	addi	sp,sp,60
    1244:	f800283a 	ret
    1248:	d9000417 	ldw	r4,16(sp)
    124c:	11000936 	bltu	r2,r4,1274 <__mulsf3+0x84>
    1250:	d8800517 	ldw	r2,20(sp)
    1254:	d8c00917 	ldw	r3,36(sp)
    1258:	d9000404 	addi	r4,sp,16
    125c:	1884c03a 	cmpne	r2,r3,r2
    1260:	d8800515 	stw	r2,20(sp)
    1264:	0001d0c0 	call	1d0c <__pack_f>
    1268:	dfc00e17 	ldw	ra,56(sp)
    126c:	dec00f04 	addi	sp,sp,60
    1270:	f800283a 	ret
    1274:	00800104 	movi	r2,4
    1278:	1880051e 	bne	r3,r2,1290 <__mulsf3+0xa0>
    127c:	00800084 	movi	r2,2
    1280:	20bfe81e 	bne	r4,r2,1224 <__mulsf3+0x34>
    1284:	01000034 	movhi	r4,0
    1288:	210a0804 	addi	r4,r4,10272
    128c:	003fea06 	br	1238 <__mulsf3+0x48>
    1290:	2080031e 	bne	r4,r2,12a0 <__mulsf3+0xb0>
    1294:	00800084 	movi	r2,2
    1298:	18bffa26 	beq	r3,r2,1284 <__mulsf3+0x94>
    129c:	003fec06 	br	1250 <__mulsf3+0x60>
    12a0:	00800084 	movi	r2,2
    12a4:	18bfdf26 	beq	r3,r2,1224 <__mulsf3+0x34>
    12a8:	20bfe926 	beq	r4,r2,1250 <__mulsf3+0x60>
    12ac:	d9000717 	ldw	r4,28(sp)
    12b0:	d9800b17 	ldw	r6,44(sp)
    12b4:	000b883a 	mov	r5,zero
    12b8:	000f883a 	mov	r7,zero
    12bc:	00004680 	call	468 <__muldi3>
    12c0:	d9000617 	ldw	r4,24(sp)
    12c4:	d9400a17 	ldw	r5,40(sp)
    12c8:	d9c00917 	ldw	r7,36(sp)
    12cc:	290b883a 	add	r5,r5,r4
    12d0:	d9000517 	ldw	r4,20(sp)
    12d4:	29800084 	addi	r6,r5,2
    12d8:	d9800215 	stw	r6,8(sp)
    12dc:	3908c03a 	cmpne	r4,r7,r4
    12e0:	d9000115 	stw	r4,4(sp)
    12e4:	1809883a 	mov	r4,r3
    12e8:	1800070e 	bge	r3,zero,1308 <__mulsf3+0x118>
    12ec:	1900004c 	andi	r4,r3,1
    12f0:	294000c4 	addi	r5,r5,3
    12f4:	20000226 	beq	r4,zero,1300 <__mulsf3+0x110>
    12f8:	1004d07a 	srli	r2,r2,1
    12fc:	10a00034 	orhi	r2,r2,32768
    1300:	1808d07a 	srli	r4,r3,1
    1304:	d9400215 	stw	r5,8(sp)
    1308:	01900034 	movhi	r6,16384
    130c:	31bfffc4 	addi	r6,r6,-1
    1310:	31000c36 	bltu	r6,r4,1344 <__mulsf3+0x154>
    1314:	d8c00217 	ldw	r3,8(sp)
    1318:	18ffffc4 	addi	r3,r3,-1
    131c:	00000306 	br	132c <__mulsf3+0x13c>
    1320:	1085883a 	add	r2,r2,r2
    1324:	18ffffc4 	addi	r3,r3,-1
    1328:	31000536 	bltu	r6,r4,1340 <__mulsf3+0x150>
    132c:	2109883a 	add	r4,r4,r4
    1330:	180b883a 	mov	r5,r3
    1334:	103ffa0e 	bge	r2,zero,1320 <__mulsf3+0x130>
    1338:	21000054 	ori	r4,r4,1
    133c:	003ff806 	br	1320 <__mulsf3+0x130>
    1340:	d9400215 	stw	r5,8(sp)
    1344:	21401fcc 	andi	r5,r4,127
    1348:	00c01004 	movi	r3,64
    134c:	28c00526 	beq	r5,r3,1364 <__mulsf3+0x174>
    1350:	008000c4 	movi	r2,3
    1354:	d9000315 	stw	r4,12(sp)
    1358:	d8800015 	stw	r2,0(sp)
    135c:	d809883a 	mov	r4,sp
    1360:	003fb506 	br	1238 <__mulsf3+0x48>
    1364:	20c0200c 	andi	r3,r4,128
    1368:	183ff91e 	bne	r3,zero,1350 <__mulsf3+0x160>
    136c:	103ff826 	beq	r2,zero,1350 <__mulsf3+0x160>
    1370:	21001004 	addi	r4,r4,64
    1374:	00bfe004 	movi	r2,-128
    1378:	2088703a 	and	r4,r4,r2
    137c:	003ff406 	br	1350 <__mulsf3+0x160>

00001380 <__floatsisf>:
    1380:	2004d7fa 	srli	r2,r4,31
    1384:	defffa04 	addi	sp,sp,-24
    1388:	00c000c4 	movi	r3,3
    138c:	dfc00515 	stw	ra,20(sp)
    1390:	dc000415 	stw	r16,16(sp)
    1394:	d8c00015 	stw	r3,0(sp)
    1398:	d8800115 	stw	r2,4(sp)
    139c:	2000081e 	bne	r4,zero,13c0 <__floatsisf+0x40>
    13a0:	00800084 	movi	r2,2
    13a4:	d8800015 	stw	r2,0(sp)
    13a8:	d809883a 	mov	r4,sp
    13ac:	0001d0c0 	call	1d0c <__pack_f>
    13b0:	dfc00517 	ldw	ra,20(sp)
    13b4:	dc000417 	ldw	r16,16(sp)
    13b8:	dec00604 	addi	sp,sp,24
    13bc:	f800283a 	ret
    13c0:	00c00784 	movi	r3,30
    13c4:	d8c00215 	stw	r3,8(sp)
    13c8:	10000b1e 	bne	r2,zero,13f8 <__floatsisf+0x78>
    13cc:	2021883a 	mov	r16,r4
    13d0:	8009883a 	mov	r4,r16
    13d4:	0001c600 	call	1c60 <__clzsi2>
    13d8:	113fffc4 	addi	r4,r2,-1
    13dc:	01000d0e 	bge	zero,r4,1414 <__floatsisf+0x94>
    13e0:	8108983a 	sll	r4,r16,r4
    13e4:	00c007c4 	movi	r3,31
    13e8:	1885c83a 	sub	r2,r3,r2
    13ec:	d9000315 	stw	r4,12(sp)
    13f0:	d8800215 	stw	r2,8(sp)
    13f4:	003fec06 	br	13a8 <__floatsisf+0x28>
    13f8:	00a00034 	movhi	r2,32768
    13fc:	20800726 	beq	r4,r2,141c <__floatsisf+0x9c>
    1400:	0121c83a 	sub	r16,zero,r4
    1404:	8009883a 	mov	r4,r16
    1408:	0001c600 	call	1c60 <__clzsi2>
    140c:	113fffc4 	addi	r4,r2,-1
    1410:	013ff316 	blt	zero,r4,13e0 <__floatsisf+0x60>
    1414:	dc000315 	stw	r16,12(sp)
    1418:	003fe306 	br	13a8 <__floatsisf+0x28>
    141c:	00b3c034 	movhi	r2,52992
    1420:	003fe306 	br	13b0 <__floatsisf+0x30>

00001424 <__fixsfsi>:
    1424:	defffa04 	addi	sp,sp,-24
    1428:	d9000415 	stw	r4,16(sp)
    142c:	d80b883a 	mov	r5,sp
    1430:	d9000404 	addi	r4,sp,16
    1434:	dfc00515 	stw	ra,20(sp)
    1438:	0001e380 	call	1e38 <__unpack_f>
    143c:	d8800017 	ldw	r2,0(sp)
    1440:	00c00084 	movi	r3,2
    1444:	10c01826 	beq	r2,r3,14a8 <__fixsfsi+0x84>
    1448:	00c00044 	movi	r3,1
    144c:	1880162e 	bgeu	r3,r2,14a8 <__fixsfsi+0x84>
    1450:	00c00104 	movi	r3,4
    1454:	10c00426 	beq	r2,r3,1468 <__fixsfsi+0x44>
    1458:	d8800217 	ldw	r2,8(sp)
    145c:	10001216 	blt	r2,zero,14a8 <__fixsfsi+0x84>
    1460:	00c00784 	movi	r3,30
    1464:	1880070e 	bge	r3,r2,1484 <__fixsfsi+0x60>
    1468:	d8800117 	ldw	r2,4(sp)
    146c:	1000121e 	bne	r2,zero,14b8 <__fixsfsi+0x94>
    1470:	00a00034 	movhi	r2,32768
    1474:	10bfffc4 	addi	r2,r2,-1
    1478:	dfc00517 	ldw	ra,20(sp)
    147c:	dec00604 	addi	sp,sp,24
    1480:	f800283a 	ret
    1484:	1885c83a 	sub	r2,r3,r2
    1488:	d8c00317 	ldw	r3,12(sp)
    148c:	1884d83a 	srl	r2,r3,r2
    1490:	d8c00117 	ldw	r3,4(sp)
    1494:	183ff826 	beq	r3,zero,1478 <__fixsfsi+0x54>
    1498:	0085c83a 	sub	r2,zero,r2
    149c:	dfc00517 	ldw	ra,20(sp)
    14a0:	dec00604 	addi	sp,sp,24
    14a4:	f800283a 	ret
    14a8:	0005883a 	mov	r2,zero
    14ac:	dfc00517 	ldw	ra,20(sp)
    14b0:	dec00604 	addi	sp,sp,24
    14b4:	f800283a 	ret
    14b8:	00a00034 	movhi	r2,32768
    14bc:	dfc00517 	ldw	ra,20(sp)
    14c0:	dec00604 	addi	sp,sp,24
    14c4:	f800283a 	ret

000014c8 <__muldf3>:
    14c8:	deffe404 	addi	sp,sp,-112
    14cc:	d9001115 	stw	r4,68(sp)
    14d0:	d9401215 	stw	r5,72(sp)
    14d4:	d9001104 	addi	r4,sp,68
    14d8:	d9400a04 	addi	r5,sp,40
    14dc:	dfc01b15 	stw	ra,108(sp)
    14e0:	d9800f15 	stw	r6,60(sp)
    14e4:	d9c01015 	stw	r7,64(sp)
    14e8:	ddc01a15 	stw	r23,104(sp)
    14ec:	dd801915 	stw	r22,100(sp)
    14f0:	dd401815 	stw	r21,96(sp)
    14f4:	dd001715 	stw	r20,92(sp)
    14f8:	dcc01615 	stw	r19,88(sp)
    14fc:	dc801515 	stw	r18,84(sp)
    1500:	dc401415 	stw	r17,80(sp)
    1504:	dc001315 	stw	r16,76(sp)
    1508:	00021240 	call	2124 <__unpack_d>
    150c:	d9000f04 	addi	r4,sp,60
    1510:	d9400504 	addi	r5,sp,20
    1514:	00021240 	call	2124 <__unpack_d>
    1518:	d8c00a17 	ldw	r3,40(sp)
    151c:	00800044 	movi	r2,1
    1520:	10c01136 	bltu	r2,r3,1568 <__muldf3+0xa0>
    1524:	d8c00b17 	ldw	r3,44(sp)
    1528:	d8800617 	ldw	r2,24(sp)
    152c:	d9000a04 	addi	r4,sp,40
    1530:	1884c03a 	cmpne	r2,r3,r2
    1534:	d8800b15 	stw	r2,44(sp)
    1538:	0001f000 	call	1f00 <__pack_d>
    153c:	dfc01b17 	ldw	ra,108(sp)
    1540:	ddc01a17 	ldw	r23,104(sp)
    1544:	dd801917 	ldw	r22,100(sp)
    1548:	dd401817 	ldw	r21,96(sp)
    154c:	dd001717 	ldw	r20,92(sp)
    1550:	dcc01617 	ldw	r19,88(sp)
    1554:	dc801517 	ldw	r18,84(sp)
    1558:	dc401417 	ldw	r17,80(sp)
    155c:	dc001317 	ldw	r16,76(sp)
    1560:	dec01c04 	addi	sp,sp,112
    1564:	f800283a 	ret
    1568:	d9000517 	ldw	r4,20(sp)
    156c:	11000636 	bltu	r2,r4,1588 <__muldf3+0xc0>
    1570:	d8800617 	ldw	r2,24(sp)
    1574:	d8c00b17 	ldw	r3,44(sp)
    1578:	d9000504 	addi	r4,sp,20
    157c:	1884c03a 	cmpne	r2,r3,r2
    1580:	d8800615 	stw	r2,24(sp)
    1584:	003fec06 	br	1538 <__muldf3+0x70>
    1588:	00800104 	movi	r2,4
    158c:	1880051e 	bne	r3,r2,15a4 <__muldf3+0xdc>
    1590:	00800084 	movi	r2,2
    1594:	20bfe31e 	bne	r4,r2,1524 <__muldf3+0x5c>
    1598:	01000034 	movhi	r4,0
    159c:	210a0c04 	addi	r4,r4,10288
    15a0:	003fe506 	br	1538 <__muldf3+0x70>
    15a4:	2080031e 	bne	r4,r2,15b4 <__muldf3+0xec>
    15a8:	00800084 	movi	r2,2
    15ac:	18bffa26 	beq	r3,r2,1598 <__muldf3+0xd0>
    15b0:	003fef06 	br	1570 <__muldf3+0xa8>
    15b4:	00800084 	movi	r2,2
    15b8:	18bfda26 	beq	r3,r2,1524 <__muldf3+0x5c>
    15bc:	20bfec26 	beq	r4,r2,1570 <__muldf3+0xa8>
    15c0:	dc000d17 	ldw	r16,52(sp)
    15c4:	dd000817 	ldw	r20,32(sp)
    15c8:	dc800917 	ldw	r18,36(sp)
    15cc:	8009883a 	mov	r4,r16
    15d0:	000b883a 	mov	r5,zero
    15d4:	a00d883a 	mov	r6,r20
    15d8:	000f883a 	mov	r7,zero
    15dc:	00004680 	call	468 <__muldi3>
    15e0:	dc400e17 	ldw	r17,56(sp)
    15e4:	9009883a 	mov	r4,r18
    15e8:	800d883a 	mov	r6,r16
    15ec:	000b883a 	mov	r5,zero
    15f0:	000f883a 	mov	r7,zero
    15f4:	102f883a 	mov	r23,r2
    15f8:	1827883a 	mov	r19,r3
    15fc:	00004680 	call	468 <__muldi3>
    1600:	900d883a 	mov	r6,r18
    1604:	8809883a 	mov	r4,r17
    1608:	000b883a 	mov	r5,zero
    160c:	000f883a 	mov	r7,zero
    1610:	102b883a 	mov	r21,r2
    1614:	1821883a 	mov	r16,r3
    1618:	00004680 	call	468 <__muldi3>
    161c:	8809883a 	mov	r4,r17
    1620:	000b883a 	mov	r5,zero
    1624:	a00d883a 	mov	r6,r20
    1628:	000f883a 	mov	r7,zero
    162c:	102d883a 	mov	r22,r2
    1630:	1825883a 	mov	r18,r3
    1634:	00004680 	call	468 <__muldi3>
    1638:	154b883a 	add	r5,r2,r21
    163c:	2889803a 	cmpltu	r4,r5,r2
    1640:	1c07883a 	add	r3,r3,r16
    1644:	20c9883a 	add	r4,r4,r3
    1648:	24004b36 	bltu	r4,r16,1778 <__muldf3+0x2b0>
    164c:	8100011e 	bne	r16,r4,1654 <__muldf3+0x18c>
    1650:	2d404936 	bltu	r5,r21,1778 <__muldf3+0x2b0>
    1654:	0011883a 	mov	r8,zero
    1658:	0007883a 	mov	r3,zero
    165c:	2ccb883a 	add	r5,r5,r19
    1660:	b80d883a 	mov	r6,r23
    1664:	2cc0012e 	bgeu	r5,r19,166c <__muldf3+0x1a4>
    1668:	02000044 	movi	r8,1
    166c:	258f883a 	add	r7,r4,r22
    1670:	3909803a 	cmpltu	r4,r7,r4
    1674:	da400c17 	ldw	r9,48(sp)
    1678:	2489883a 	add	r4,r4,r18
    167c:	d8800717 	ldw	r2,28(sp)
    1680:	20c9883a 	add	r4,r4,r3
    1684:	da800b17 	ldw	r10,44(sp)
    1688:	d8c00617 	ldw	r3,24(sp)
    168c:	3a11883a 	add	r8,r7,r8
    1690:	4885883a 	add	r2,r9,r2
    1694:	50c6c03a 	cmpne	r3,r10,r3
    1698:	41cf803a 	cmpltu	r7,r8,r7
    169c:	12400104 	addi	r9,r2,4
    16a0:	d8c00115 	stw	r3,4(sp)
    16a4:	3909883a 	add	r4,r7,r4
    16a8:	da400215 	stw	r9,8(sp)
    16ac:	03480034 	movhi	r13,8192
    16b0:	6b7fffc4 	addi	r13,r13,-1
    16b4:	4007883a 	mov	r3,r8
    16b8:	6900102e 	bgeu	r13,r4,16fc <__muldf3+0x234>
    16bc:	10800144 	addi	r2,r2,5
    16c0:	180ed07a 	srli	r7,r3,1
    16c4:	18c0004c 	andi	r3,r3,1
    16c8:	201097fa 	slli	r8,r4,31
    16cc:	281697fa 	slli	r11,r5,31
    16d0:	2008d07a 	srli	r4,r4,1
    16d4:	3014d07a 	srli	r10,r6,1
    16d8:	2812d07a 	srli	r9,r5,1
    16dc:	1019883a 	mov	r12,r2
    16e0:	18000226 	beq	r3,zero,16ec <__muldf3+0x224>
    16e4:	5a8cb03a 	or	r6,r11,r10
    16e8:	49600034 	orhi	r5,r9,32768
    16ec:	41c6b03a 	or	r3,r8,r7
    16f0:	10800044 	addi	r2,r2,1
    16f4:	693ff236 	bltu	r13,r4,16c0 <__muldf3+0x1f8>
    16f8:	db000215 	stw	r12,8(sp)
    16fc:	03440034 	movhi	r13,4096
    1700:	6b7fffc4 	addi	r13,r13,-1
    1704:	69001336 	bltu	r13,r4,1754 <__muldf3+0x28c>
    1708:	d8800217 	ldw	r2,8(sp)
    170c:	10bfffc4 	addi	r2,r2,-1
    1710:	18d3883a 	add	r9,r3,r3
    1714:	48c7803a 	cmpltu	r3,r9,r3
    1718:	2109883a 	add	r4,r4,r4
    171c:	190f883a 	add	r7,r3,r4
    1720:	3191883a 	add	r8,r6,r6
    1724:	4197803a 	cmpltu	r11,r8,r6
    1728:	2955883a 	add	r10,r5,r5
    172c:	1019883a 	mov	r12,r2
    1730:	4807883a 	mov	r3,r9
    1734:	3809883a 	mov	r4,r7
    1738:	2800010e 	bge	r5,zero,1740 <__muldf3+0x278>
    173c:	48c00054 	ori	r3,r9,1
    1740:	400d883a 	mov	r6,r8
    1744:	5a8b883a 	add	r5,r11,r10
    1748:	10bfffc4 	addi	r2,r2,-1
    174c:	69fff02e 	bgeu	r13,r7,1710 <__muldf3+0x248>
    1750:	db000215 	stw	r12,8(sp)
    1754:	18803fcc 	andi	r2,r3,255
    1758:	01c02004 	movi	r7,128
    175c:	11c00926 	beq	r2,r7,1784 <__muldf3+0x2bc>
    1760:	008000c4 	movi	r2,3
    1764:	d9000415 	stw	r4,16(sp)
    1768:	d8c00315 	stw	r3,12(sp)
    176c:	d8800015 	stw	r2,0(sp)
    1770:	d809883a 	mov	r4,sp
    1774:	003f7006 	br	1538 <__muldf3+0x70>
    1778:	0011883a 	mov	r8,zero
    177c:	00c00044 	movi	r3,1
    1780:	003fb606 	br	165c <__muldf3+0x194>
    1784:	19c0400c 	andi	r7,r3,256
    1788:	383ff51e 	bne	r7,zero,1760 <__muldf3+0x298>
    178c:	314ab03a 	or	r5,r6,r5
    1790:	283ff326 	beq	r5,zero,1760 <__muldf3+0x298>
    1794:	1885883a 	add	r2,r3,r2
    1798:	10cb803a 	cmpltu	r5,r2,r3
    179c:	00ffc004 	movi	r3,-256
    17a0:	10c6703a 	and	r3,r2,r3
    17a4:	2909883a 	add	r4,r5,r4
    17a8:	003fed06 	br	1760 <__muldf3+0x298>

000017ac <__divdf3>:
    17ac:	defff104 	addi	sp,sp,-60
    17b0:	d9000c15 	stw	r4,48(sp)
    17b4:	d9400d15 	stw	r5,52(sp)
    17b8:	d9000c04 	addi	r4,sp,48
    17bc:	d9400504 	addi	r5,sp,20
    17c0:	dfc00e15 	stw	ra,56(sp)
    17c4:	d9800a15 	stw	r6,40(sp)
    17c8:	d9c00b15 	stw	r7,44(sp)
    17cc:	00021240 	call	2124 <__unpack_d>
    17d0:	d9000a04 	addi	r4,sp,40
    17d4:	d80b883a 	mov	r5,sp
    17d8:	00021240 	call	2124 <__unpack_d>
    17dc:	d8c00517 	ldw	r3,20(sp)
    17e0:	00800044 	movi	r2,1
    17e4:	10c00536 	bltu	r2,r3,17fc <__divdf3+0x50>
    17e8:	d9000504 	addi	r4,sp,20
    17ec:	0001f000 	call	1f00 <__pack_d>
    17f0:	dfc00e17 	ldw	ra,56(sp)
    17f4:	dec00f04 	addi	sp,sp,60
    17f8:	f800283a 	ret
    17fc:	d9000017 	ldw	r4,0(sp)
    1800:	11000536 	bltu	r2,r4,1818 <__divdf3+0x6c>
    1804:	d809883a 	mov	r4,sp
    1808:	0001f000 	call	1f00 <__pack_d>
    180c:	dfc00e17 	ldw	ra,56(sp)
    1810:	dec00f04 	addi	sp,sp,60
    1814:	f800283a 	ret
    1818:	d9800617 	ldw	r6,24(sp)
    181c:	d9400117 	ldw	r5,4(sp)
    1820:	00800104 	movi	r2,4
    1824:	314af03a 	xor	r5,r6,r5
    1828:	d9400615 	stw	r5,24(sp)
    182c:	18800226 	beq	r3,r2,1838 <__divdf3+0x8c>
    1830:	01400084 	movi	r5,2
    1834:	1940041e 	bne	r3,r5,1848 <__divdf3+0x9c>
    1838:	193feb1e 	bne	r3,r4,17e8 <__divdf3+0x3c>
    183c:	01000034 	movhi	r4,0
    1840:	210a0c04 	addi	r4,r4,10288
    1844:	003fe906 	br	17ec <__divdf3+0x40>
    1848:	20803326 	beq	r4,r2,1918 <__divdf3+0x16c>
    184c:	21403726 	beq	r4,r5,192c <__divdf3+0x180>
    1850:	d8800217 	ldw	r2,8(sp)
    1854:	d9000717 	ldw	r4,28(sp)
    1858:	d8c00917 	ldw	r3,36(sp)
    185c:	da000417 	ldw	r8,16(sp)
    1860:	2089c83a 	sub	r4,r4,r2
    1864:	d9000715 	stw	r4,28(sp)
    1868:	d8800817 	ldw	r2,32(sp)
    186c:	dbc00317 	ldw	r15,12(sp)
    1870:	1a000236 	bltu	r3,r8,187c <__divdf3+0xd0>
    1874:	40c0081e 	bne	r8,r3,1898 <__divdf3+0xec>
    1878:	13c0072e 	bgeu	r2,r15,1898 <__divdf3+0xec>
    187c:	108b883a 	add	r5,r2,r2
    1880:	288d803a 	cmpltu	r6,r5,r2
    1884:	18c7883a 	add	r3,r3,r3
    1888:	213fffc4 	addi	r4,r4,-1
    188c:	2805883a 	mov	r2,r5
    1890:	30c7883a 	add	r3,r6,r3
    1894:	d9000715 	stw	r4,28(sp)
    1898:	01400f44 	movi	r5,61
    189c:	000f883a 	mov	r7,zero
    18a0:	01040034 	movhi	r4,4096
    18a4:	0019883a 	mov	r12,zero
    18a8:	001b883a 	mov	r13,zero
    18ac:	201697fa 	slli	r11,r4,31
    18b0:	3814d07a 	srli	r10,r7,1
    18b4:	297fffc4 	addi	r5,r5,-1
    18b8:	1a000936 	bltu	r3,r8,18e0 <__divdf3+0x134>
    18bc:	13cdc83a 	sub	r6,r2,r15
    18c0:	1193803a 	cmpltu	r9,r2,r6
    18c4:	1a1dc83a 	sub	r14,r3,r8
    18c8:	40c0011e 	bne	r8,r3,18d0 <__divdf3+0x124>
    18cc:	13c00436 	bltu	r2,r15,18e0 <__divdf3+0x134>
    18d0:	3005883a 	mov	r2,r6
    18d4:	7247c83a 	sub	r3,r14,r9
    18d8:	61d8b03a 	or	r12,r12,r7
    18dc:	691ab03a 	or	r13,r13,r4
    18e0:	108d883a 	add	r6,r2,r2
    18e4:	3093803a 	cmpltu	r9,r6,r2
    18e8:	18c7883a 	add	r3,r3,r3
    18ec:	5a8eb03a 	or	r7,r11,r10
    18f0:	2008d07a 	srli	r4,r4,1
    18f4:	3005883a 	mov	r2,r6
    18f8:	48c7883a 	add	r3,r9,r3
    18fc:	283feb1e 	bne	r5,zero,18ac <__divdf3+0x100>
    1900:	61003fcc 	andi	r4,r12,255
    1904:	01402004 	movi	r5,128
    1908:	21400b26 	beq	r4,r5,1938 <__divdf3+0x18c>
    190c:	db000815 	stw	r12,32(sp)
    1910:	db400915 	stw	r13,36(sp)
    1914:	003fb406 	br	17e8 <__divdf3+0x3c>
    1918:	d8000815 	stw	zero,32(sp)
    191c:	d8000915 	stw	zero,36(sp)
    1920:	d8000715 	stw	zero,28(sp)
    1924:	d9000504 	addi	r4,sp,20
    1928:	003fb006 	br	17ec <__divdf3+0x40>
    192c:	d8800515 	stw	r2,20(sp)
    1930:	d9000504 	addi	r4,sp,20
    1934:	003fad06 	br	17ec <__divdf3+0x40>
    1938:	6140400c 	andi	r5,r12,256
    193c:	283ff31e 	bne	r5,zero,190c <__divdf3+0x160>
    1940:	30c4b03a 	or	r2,r6,r3
    1944:	103ff126 	beq	r2,zero,190c <__divdf3+0x160>
    1948:	6109883a 	add	r4,r12,r4
    194c:	2305803a 	cmpltu	r2,r4,r12
    1950:	033fc004 	movi	r12,-256
    1954:	2318703a 	and	r12,r4,r12
    1958:	135b883a 	add	r13,r2,r13
    195c:	003feb06 	br	190c <__divdf3+0x160>

00001960 <__floatsidf>:
    1960:	2004d7fa 	srli	r2,r4,31
    1964:	defff904 	addi	sp,sp,-28
    1968:	00c000c4 	movi	r3,3
    196c:	dfc00615 	stw	ra,24(sp)
    1970:	dc000515 	stw	r16,20(sp)
    1974:	d8c00015 	stw	r3,0(sp)
    1978:	d8800115 	stw	r2,4(sp)
    197c:	2000081e 	bne	r4,zero,19a0 <__floatsidf+0x40>
    1980:	00800084 	movi	r2,2
    1984:	d8800015 	stw	r2,0(sp)
    1988:	d809883a 	mov	r4,sp
    198c:	0001f000 	call	1f00 <__pack_d>
    1990:	dfc00617 	ldw	ra,24(sp)
    1994:	dc000517 	ldw	r16,20(sp)
    1998:	dec00704 	addi	sp,sp,28
    199c:	f800283a 	ret
    19a0:	00c00f04 	movi	r3,60
    19a4:	d8c00215 	stw	r3,8(sp)
    19a8:	10000f1e 	bne	r2,zero,19e8 <__floatsidf+0x88>
    19ac:	2021883a 	mov	r16,r4
    19b0:	8009883a 	mov	r4,r16
    19b4:	0001c600 	call	1c60 <__clzsi2>
    19b8:	11000744 	addi	r4,r2,29
    19bc:	0100110e 	bge	zero,r4,1a04 <__floatsidf+0xa4>
    19c0:	10ffff44 	addi	r3,r2,-3
    19c4:	18001216 	blt	r3,zero,1a10 <__floatsidf+0xb0>
    19c8:	80c6983a 	sll	r3,r16,r3
    19cc:	0009883a 	mov	r4,zero
    19d0:	014007c4 	movi	r5,31
    19d4:	2885c83a 	sub	r2,r5,r2
    19d8:	d9000315 	stw	r4,12(sp)
    19dc:	d8c00415 	stw	r3,16(sp)
    19e0:	d8800215 	stw	r2,8(sp)
    19e4:	003fe806 	br	1988 <__floatsidf+0x28>
    19e8:	00a00034 	movhi	r2,32768
    19ec:	20800e26 	beq	r4,r2,1a28 <__floatsidf+0xc8>
    19f0:	0121c83a 	sub	r16,zero,r4
    19f4:	8009883a 	mov	r4,r16
    19f8:	0001c600 	call	1c60 <__clzsi2>
    19fc:	11000744 	addi	r4,r2,29
    1a00:	013fef16 	blt	zero,r4,19c0 <__floatsidf+0x60>
    1a04:	dc000315 	stw	r16,12(sp)
    1a08:	d8000415 	stw	zero,16(sp)
    1a0c:	003fde06 	br	1988 <__floatsidf+0x28>
    1a10:	800ad07a 	srli	r5,r16,1
    1a14:	00c007c4 	movi	r3,31
    1a18:	1907c83a 	sub	r3,r3,r4
    1a1c:	28c6d83a 	srl	r3,r5,r3
    1a20:	8108983a 	sll	r4,r16,r4
    1a24:	003fea06 	br	19d0 <__floatsidf+0x70>
    1a28:	0005883a 	mov	r2,zero
    1a2c:	00f07834 	movhi	r3,49632
    1a30:	003fd706 	br	1990 <__floatsidf+0x30>

00001a34 <__fixdfsi>:
    1a34:	defff804 	addi	sp,sp,-32
    1a38:	d9000515 	stw	r4,20(sp)
    1a3c:	d9400615 	stw	r5,24(sp)
    1a40:	d9000504 	addi	r4,sp,20
    1a44:	d80b883a 	mov	r5,sp
    1a48:	dfc00715 	stw	ra,28(sp)
    1a4c:	00021240 	call	2124 <__unpack_d>
    1a50:	d8800017 	ldw	r2,0(sp)
    1a54:	00c00084 	movi	r3,2
    1a58:	10c01c26 	beq	r2,r3,1acc <__fixdfsi+0x98>
    1a5c:	00c00044 	movi	r3,1
    1a60:	18801a2e 	bgeu	r3,r2,1acc <__fixdfsi+0x98>
    1a64:	00c00104 	movi	r3,4
    1a68:	10c01126 	beq	r2,r3,1ab0 <__fixdfsi+0x7c>
    1a6c:	d8800217 	ldw	r2,8(sp)
    1a70:	10001616 	blt	r2,zero,1acc <__fixdfsi+0x98>
    1a74:	00c00784 	movi	r3,30
    1a78:	18800d16 	blt	r3,r2,1ab0 <__fixdfsi+0x7c>
    1a7c:	00c00f04 	movi	r3,60
    1a80:	1885c83a 	sub	r2,r3,r2
    1a84:	10fff804 	addi	r3,r2,-32
    1a88:	d9400317 	ldw	r5,12(sp)
    1a8c:	d9000417 	ldw	r4,16(sp)
    1a90:	18001616 	blt	r3,zero,1aec <__fixdfsi+0xb8>
    1a94:	20c4d83a 	srl	r2,r4,r3
    1a98:	d8c00117 	ldw	r3,4(sp)
    1a9c:	18000126 	beq	r3,zero,1aa4 <__fixdfsi+0x70>
    1aa0:	0085c83a 	sub	r2,zero,r2
    1aa4:	dfc00717 	ldw	ra,28(sp)
    1aa8:	dec00804 	addi	sp,sp,32
    1aac:	f800283a 	ret
    1ab0:	d8800117 	ldw	r2,4(sp)
    1ab4:	1000091e 	bne	r2,zero,1adc <__fixdfsi+0xa8>
    1ab8:	00a00034 	movhi	r2,32768
    1abc:	10bfffc4 	addi	r2,r2,-1
    1ac0:	dfc00717 	ldw	ra,28(sp)
    1ac4:	dec00804 	addi	sp,sp,32
    1ac8:	f800283a 	ret
    1acc:	0005883a 	mov	r2,zero
    1ad0:	dfc00717 	ldw	ra,28(sp)
    1ad4:	dec00804 	addi	sp,sp,32
    1ad8:	f800283a 	ret
    1adc:	00a00034 	movhi	r2,32768
    1ae0:	dfc00717 	ldw	ra,28(sp)
    1ae4:	dec00804 	addi	sp,sp,32
    1ae8:	f800283a 	ret
    1aec:	2008907a 	slli	r4,r4,1
    1af0:	018007c4 	movi	r6,31
    1af4:	308dc83a 	sub	r6,r6,r2
    1af8:	2188983a 	sll	r4,r4,r6
    1afc:	2884d83a 	srl	r2,r5,r2
    1b00:	2084b03a 	or	r2,r4,r2
    1b04:	003fe406 	br	1a98 <__fixdfsi+0x64>

00001b08 <udivmodsi4>:
    1b08:	2005883a 	mov	r2,r4
    1b0c:	2900182e 	bgeu	r5,r4,1b70 <udivmodsi4+0x68>
    1b10:	28001716 	blt	r5,zero,1b70 <udivmodsi4+0x68>
    1b14:	01000804 	movi	r4,32
    1b18:	00c00044 	movi	r3,1
    1b1c:	00000206 	br	1b28 <udivmodsi4+0x20>
    1b20:	20001126 	beq	r4,zero,1b68 <udivmodsi4+0x60>
    1b24:	28000516 	blt	r5,zero,1b3c <udivmodsi4+0x34>
    1b28:	294b883a 	add	r5,r5,r5
    1b2c:	213fffc4 	addi	r4,r4,-1
    1b30:	18c7883a 	add	r3,r3,r3
    1b34:	28bffa36 	bltu	r5,r2,1b20 <udivmodsi4+0x18>
    1b38:	18000b26 	beq	r3,zero,1b68 <udivmodsi4+0x60>
    1b3c:	0009883a 	mov	r4,zero
    1b40:	11400236 	bltu	r2,r5,1b4c <udivmodsi4+0x44>
    1b44:	1145c83a 	sub	r2,r2,r5
    1b48:	20c8b03a 	or	r4,r4,r3
    1b4c:	1806d07a 	srli	r3,r3,1
    1b50:	280ad07a 	srli	r5,r5,1
    1b54:	183ffa1e 	bne	r3,zero,1b40 <udivmodsi4+0x38>
    1b58:	3000021e 	bne	r6,zero,1b64 <udivmodsi4+0x5c>
    1b5c:	2005883a 	mov	r2,r4
    1b60:	f800283a 	ret
    1b64:	f800283a 	ret
    1b68:	0009883a 	mov	r4,zero
    1b6c:	003ffa06 	br	1b58 <udivmodsi4+0x50>
    1b70:	00c00044 	movi	r3,1
    1b74:	0009883a 	mov	r4,zero
    1b78:	003ff106 	br	1b40 <udivmodsi4+0x38>

00001b7c <__divsi3>:
    1b7c:	defffe04 	addi	sp,sp,-8
    1b80:	dfc00115 	stw	ra,4(sp)
    1b84:	dc000015 	stw	r16,0(sp)
    1b88:	20000a16 	blt	r4,zero,1bb4 <__divsi3+0x38>
    1b8c:	0021883a 	mov	r16,zero
    1b90:	28000b16 	blt	r5,zero,1bc0 <__divsi3+0x44>
    1b94:	000d883a 	mov	r6,zero
    1b98:	0001b080 	call	1b08 <udivmodsi4>
    1b9c:	80000126 	beq	r16,zero,1ba4 <__divsi3+0x28>
    1ba0:	0085c83a 	sub	r2,zero,r2
    1ba4:	dfc00117 	ldw	ra,4(sp)
    1ba8:	dc000017 	ldw	r16,0(sp)
    1bac:	dec00204 	addi	sp,sp,8
    1bb0:	f800283a 	ret
    1bb4:	0109c83a 	sub	r4,zero,r4
    1bb8:	04000044 	movi	r16,1
    1bbc:	283ff50e 	bge	r5,zero,1b94 <__divsi3+0x18>
    1bc0:	014bc83a 	sub	r5,zero,r5
    1bc4:	8400005c 	xori	r16,r16,1
    1bc8:	003ff206 	br	1b94 <__divsi3+0x18>

00001bcc <__modsi3>:
    1bcc:	deffff04 	addi	sp,sp,-4
    1bd0:	dfc00015 	stw	ra,0(sp)
    1bd4:	20000516 	blt	r4,zero,1bec <__modsi3+0x20>
    1bd8:	28000c16 	blt	r5,zero,1c0c <__modsi3+0x40>
    1bdc:	01800044 	movi	r6,1
    1be0:	dfc00017 	ldw	ra,0(sp)
    1be4:	dec00104 	addi	sp,sp,4
    1be8:	0001b081 	jmpi	1b08 <udivmodsi4>
    1bec:	0109c83a 	sub	r4,zero,r4
    1bf0:	28000b16 	blt	r5,zero,1c20 <__modsi3+0x54>
    1bf4:	01800044 	movi	r6,1
    1bf8:	0001b080 	call	1b08 <udivmodsi4>
    1bfc:	0085c83a 	sub	r2,zero,r2
    1c00:	dfc00017 	ldw	ra,0(sp)
    1c04:	dec00104 	addi	sp,sp,4
    1c08:	f800283a 	ret
    1c0c:	014bc83a 	sub	r5,zero,r5
    1c10:	01800044 	movi	r6,1
    1c14:	dfc00017 	ldw	ra,0(sp)
    1c18:	dec00104 	addi	sp,sp,4
    1c1c:	0001b081 	jmpi	1b08 <udivmodsi4>
    1c20:	014bc83a 	sub	r5,zero,r5
    1c24:	003ff306 	br	1bf4 <__modsi3+0x28>

00001c28 <__udivsi3>:
    1c28:	000d883a 	mov	r6,zero
    1c2c:	0001b081 	jmpi	1b08 <udivmodsi4>

00001c30 <__umodsi3>:
    1c30:	01800044 	movi	r6,1
    1c34:	0001b081 	jmpi	1b08 <udivmodsi4>

00001c38 <__mulsi3>:
    1c38:	0005883a 	mov	r2,zero
    1c3c:	20000726 	beq	r4,zero,1c5c <__mulsi3+0x24>
    1c40:	20c0004c 	andi	r3,r4,1
    1c44:	2008d07a 	srli	r4,r4,1
    1c48:	18000126 	beq	r3,zero,1c50 <__mulsi3+0x18>
    1c4c:	1145883a 	add	r2,r2,r5
    1c50:	294b883a 	add	r5,r5,r5
    1c54:	203ffa1e 	bne	r4,zero,1c40 <__mulsi3+0x8>
    1c58:	f800283a 	ret
    1c5c:	f800283a 	ret

00001c60 <__clzsi2>:
    1c60:	00bfffd4 	movui	r2,65535
    1c64:	11000b36 	bltu	r2,r4,1c94 <__clzsi2+0x34>
    1c68:	00803fc4 	movi	r2,255
    1c6c:	11001e2e 	bgeu	r2,r4,1ce8 <__clzsi2+0x88>
    1c70:	00c00204 	movi	r3,8
    1c74:	20c8d83a 	srl	r4,r4,r3
    1c78:	00c00034 	movhi	r3,0
    1c7c:	18ca1104 	addi	r3,r3,10308
    1c80:	00800604 	movi	r2,24
    1c84:	1909883a 	add	r4,r3,r4
    1c88:	20c00003 	ldbu	r3,0(r4)
    1c8c:	10c5c83a 	sub	r2,r2,r3
    1c90:	f800283a 	ret
    1c94:	00804034 	movhi	r2,256
    1c98:	10bfffc4 	addi	r2,r2,-1
    1c9c:	11000936 	bltu	r2,r4,1cc4 <__clzsi2+0x64>
    1ca0:	00800404 	movi	r2,16
    1ca4:	1007883a 	mov	r3,r2
    1ca8:	20c8d83a 	srl	r4,r4,r3
    1cac:	00c00034 	movhi	r3,0
    1cb0:	18ca1104 	addi	r3,r3,10308
    1cb4:	1909883a 	add	r4,r3,r4
    1cb8:	20c00003 	ldbu	r3,0(r4)
    1cbc:	10c5c83a 	sub	r2,r2,r3
    1cc0:	f800283a 	ret
    1cc4:	00c00604 	movi	r3,24
    1cc8:	20c8d83a 	srl	r4,r4,r3
    1ccc:	00c00034 	movhi	r3,0
    1cd0:	18ca1104 	addi	r3,r3,10308
    1cd4:	00800204 	movi	r2,8
    1cd8:	1909883a 	add	r4,r3,r4
    1cdc:	20c00003 	ldbu	r3,0(r4)
    1ce0:	10c5c83a 	sub	r2,r2,r3
    1ce4:	f800283a 	ret
    1ce8:	0007883a 	mov	r3,zero
    1cec:	20c8d83a 	srl	r4,r4,r3
    1cf0:	00c00034 	movhi	r3,0
    1cf4:	18ca1104 	addi	r3,r3,10308
    1cf8:	00800804 	movi	r2,32
    1cfc:	1909883a 	add	r4,r3,r4
    1d00:	20c00003 	ldbu	r3,0(r4)
    1d04:	10c5c83a 	sub	r2,r2,r3
    1d08:	f800283a 	ret

00001d0c <__pack_f>:
    1d0c:	21400017 	ldw	r5,0(r4)
    1d10:	01800044 	movi	r6,1
    1d14:	20c00317 	ldw	r3,12(r4)
    1d18:	21c00117 	ldw	r7,4(r4)
    1d1c:	3140282e 	bgeu	r6,r5,1dc0 <__pack_f+0xb4>
    1d20:	00800104 	movi	r2,4
    1d24:	28802326 	beq	r5,r2,1db4 <__pack_f+0xa8>
    1d28:	00800084 	movi	r2,2
    1d2c:	28800f26 	beq	r5,r2,1d6c <__pack_f+0x60>
    1d30:	18000e26 	beq	r3,zero,1d6c <__pack_f+0x60>
    1d34:	21000217 	ldw	r4,8(r4)
    1d38:	00bfe084 	movi	r2,-126
    1d3c:	20802616 	blt	r4,r2,1dd8 <__pack_f+0xcc>
    1d40:	00801fc4 	movi	r2,127
    1d44:	11001b16 	blt	r2,r4,1db4 <__pack_f+0xa8>
    1d48:	188a703a 	and	r5,r3,r2
    1d4c:	00801004 	movi	r2,64
    1d50:	28801126 	beq	r5,r2,1d98 <__pack_f+0x8c>
    1d54:	18c00fc4 	addi	r3,r3,63
    1d58:	18001316 	blt	r3,zero,1da8 <__pack_f+0x9c>
    1d5c:	21001fc4 	addi	r4,r4,127
    1d60:	180690ba 	slli	r3,r3,2
    1d64:	1806d27a 	srli	r3,r3,9
    1d68:	00000206 	br	1d74 <__pack_f+0x68>
    1d6c:	0009883a 	mov	r4,zero
    1d70:	0007883a 	mov	r3,zero
    1d74:	21003fcc 	andi	r4,r4,255
    1d78:	200895fa 	slli	r4,r4,23
    1d7c:	380a97fa 	slli	r5,r7,31
    1d80:	00802034 	movhi	r2,128
    1d84:	10bfffc4 	addi	r2,r2,-1
    1d88:	1886703a 	and	r3,r3,r2
    1d8c:	1904b03a 	or	r2,r3,r4
    1d90:	1144b03a 	or	r2,r2,r5
    1d94:	f800283a 	ret
    1d98:	1880200c 	andi	r2,r3,128
    1d9c:	103fee26 	beq	r2,zero,1d58 <__pack_f+0x4c>
    1da0:	18c01004 	addi	r3,r3,64
    1da4:	183fed0e 	bge	r3,zero,1d5c <__pack_f+0x50>
    1da8:	1806d07a 	srli	r3,r3,1
    1dac:	21002004 	addi	r4,r4,128
    1db0:	003feb06 	br	1d60 <__pack_f+0x54>
    1db4:	013fffc4 	movi	r4,-1
    1db8:	0007883a 	mov	r3,zero
    1dbc:	003fed06 	br	1d74 <__pack_f+0x68>
    1dc0:	18c00434 	orhi	r3,r3,16
    1dc4:	00802034 	movhi	r2,128
    1dc8:	10bfffc4 	addi	r2,r2,-1
    1dcc:	1886703a 	and	r3,r3,r2
    1dd0:	013fffc4 	movi	r4,-1
    1dd4:	003fe706 	br	1d74 <__pack_f+0x68>
    1dd8:	1105c83a 	sub	r2,r2,r4
    1ddc:	01000644 	movi	r4,25
    1de0:	20801216 	blt	r4,r2,1e2c <__pack_f+0x120>
    1de4:	3088983a 	sll	r4,r6,r2
    1de8:	1884d83a 	srl	r2,r3,r2
    1dec:	213fffc4 	addi	r4,r4,-1
    1df0:	20c6703a 	and	r3,r4,r3
    1df4:	1806c03a 	cmpne	r3,r3,zero
    1df8:	1884b03a 	or	r2,r3,r2
    1dfc:	11001fcc 	andi	r4,r2,127
    1e00:	00c01004 	movi	r3,64
    1e04:	20c00a1e 	bne	r4,r3,1e30 <__pack_f+0x124>
    1e08:	10c0200c 	andi	r3,r2,128
    1e0c:	18000126 	beq	r3,zero,1e14 <__pack_f+0x108>
    1e10:	10801004 	addi	r2,r2,64
    1e14:	100690ba 	slli	r3,r2,2
    1e18:	01100034 	movhi	r4,16384
    1e1c:	1105403a 	cmpgeu	r2,r2,r4
    1e20:	1806d27a 	srli	r3,r3,9
    1e24:	1009883a 	mov	r4,r2
    1e28:	003fd206 	br	1d74 <__pack_f+0x68>
    1e2c:	0005883a 	mov	r2,zero
    1e30:	10800fc4 	addi	r2,r2,63
    1e34:	003ff706 	br	1e14 <__pack_f+0x108>

00001e38 <__unpack_f>:
    1e38:	20c00017 	ldw	r3,0(r4)
    1e3c:	00802034 	movhi	r2,128
    1e40:	10bfffc4 	addi	r2,r2,-1
    1e44:	1808d5fa 	srli	r4,r3,23
    1e48:	180cd7fa 	srli	r6,r3,31
    1e4c:	1884703a 	and	r2,r3,r2
    1e50:	21003fcc 	andi	r4,r4,255
    1e54:	29800115 	stw	r6,4(r5)
    1e58:	2000111e 	bne	r4,zero,1ea0 <__unpack_f+0x68>
    1e5c:	10001a26 	beq	r2,zero,1ec8 <__unpack_f+0x90>
    1e60:	00ffe084 	movi	r3,-126
    1e64:	100491fa 	slli	r2,r2,7
    1e68:	28c00215 	stw	r3,8(r5)
    1e6c:	00c000c4 	movi	r3,3
    1e70:	28c00015 	stw	r3,0(r5)
    1e74:	01900034 	movhi	r6,16384
    1e78:	31bfffc4 	addi	r6,r6,-1
    1e7c:	30801036 	bltu	r6,r2,1ec0 <__unpack_f+0x88>
    1e80:	00ffe044 	movi	r3,-127
    1e84:	1085883a 	add	r2,r2,r2
    1e88:	1809883a 	mov	r4,r3
    1e8c:	18ffffc4 	addi	r3,r3,-1
    1e90:	30bffc2e 	bgeu	r6,r2,1e84 <__unpack_f+0x4c>
    1e94:	29000215 	stw	r4,8(r5)
    1e98:	28800315 	stw	r2,12(r5)
    1e9c:	f800283a 	ret
    1ea0:	01803fc4 	movi	r6,255
    1ea4:	21800b26 	beq	r4,r6,1ed4 <__unpack_f+0x9c>
    1ea8:	100491fa 	slli	r2,r2,7
    1eac:	213fe044 	addi	r4,r4,-127
    1eb0:	00c000c4 	movi	r3,3
    1eb4:	10900034 	orhi	r2,r2,16384
    1eb8:	29000215 	stw	r4,8(r5)
    1ebc:	28c00015 	stw	r3,0(r5)
    1ec0:	28800315 	stw	r2,12(r5)
    1ec4:	f800283a 	ret
    1ec8:	00800084 	movi	r2,2
    1ecc:	28800015 	stw	r2,0(r5)
    1ed0:	f800283a 	ret
    1ed4:	10000526 	beq	r2,zero,1eec <__unpack_f+0xb4>
    1ed8:	18c0042c 	andhi	r3,r3,16
    1edc:	18000626 	beq	r3,zero,1ef8 <__unpack_f+0xc0>
    1ee0:	00c00044 	movi	r3,1
    1ee4:	28c00015 	stw	r3,0(r5)
    1ee8:	003ff506 	br	1ec0 <__unpack_f+0x88>
    1eec:	00800104 	movi	r2,4
    1ef0:	28800015 	stw	r2,0(r5)
    1ef4:	f800283a 	ret
    1ef8:	28000015 	stw	zero,0(r5)
    1efc:	003ff006 	br	1ec0 <__unpack_f+0x88>

00001f00 <__pack_d>:
    1f00:	20800017 	ldw	r2,0(r4)
    1f04:	defff804 	addi	sp,sp,-32
    1f08:	dcc00315 	stw	r19,12(sp)
    1f0c:	dc800215 	stw	r18,8(sp)
    1f10:	dfc00715 	stw	ra,28(sp)
    1f14:	dd800615 	stw	r22,24(sp)
    1f18:	dd400515 	stw	r21,20(sp)
    1f1c:	dd000415 	stw	r20,16(sp)
    1f20:	dc400115 	stw	r17,4(sp)
    1f24:	dc000015 	stw	r16,0(sp)
    1f28:	04800044 	movi	r18,1
    1f2c:	24400317 	ldw	r17,12(r4)
    1f30:	24000417 	ldw	r16,16(r4)
    1f34:	24c00117 	ldw	r19,4(r4)
    1f38:	9080422e 	bgeu	r18,r2,2044 <__pack_d+0x144>
    1f3c:	00c00104 	movi	r3,4
    1f40:	10c03c26 	beq	r2,r3,2034 <__pack_d+0x134>
    1f44:	00c00084 	movi	r3,2
    1f48:	10c01926 	beq	r2,r3,1fb0 <__pack_d+0xb0>
    1f4c:	8c04b03a 	or	r2,r17,r16
    1f50:	10001726 	beq	r2,zero,1fb0 <__pack_d+0xb0>
    1f54:	21000217 	ldw	r4,8(r4)
    1f58:	00bf0084 	movi	r2,-1022
    1f5c:	20804016 	blt	r4,r2,2060 <__pack_d+0x160>
    1f60:	0080ffc4 	movi	r2,1023
    1f64:	11003316 	blt	r2,r4,2034 <__pack_d+0x134>
    1f68:	88803fcc 	andi	r2,r17,255
    1f6c:	00c02004 	movi	r3,128
    1f70:	10c02926 	beq	r2,r3,2018 <__pack_d+0x118>
    1f74:	88801fc4 	addi	r2,r17,127
    1f78:	1463803a 	cmpltu	r17,r2,r17
    1f7c:	8c21883a 	add	r16,r17,r16
    1f80:	1023883a 	mov	r17,r2
    1f84:	00880034 	movhi	r2,8192
    1f88:	10bfffc4 	addi	r2,r2,-1
    1f8c:	14001c36 	bltu	r2,r16,2000 <__pack_d+0x100>
    1f90:	2100ffc4 	addi	r4,r4,1023
    1f94:	8006963a 	slli	r3,r16,24
    1f98:	8804d23a 	srli	r2,r17,8
    1f9c:	8020913a 	slli	r16,r16,4
    1fa0:	2101ffcc 	andi	r4,r4,2047
    1fa4:	1884b03a 	or	r2,r3,r2
    1fa8:	8020d33a 	srli	r16,r16,12
    1fac:	00000306 	br	1fbc <__pack_d+0xbc>
    1fb0:	0009883a 	mov	r4,zero
    1fb4:	0005883a 	mov	r2,zero
    1fb8:	0021883a 	mov	r16,zero
    1fbc:	2008953a 	slli	r4,r4,20
    1fc0:	982697fa 	slli	r19,r19,31
    1fc4:	00c00434 	movhi	r3,16
    1fc8:	18ffffc4 	addi	r3,r3,-1
    1fcc:	80e0703a 	and	r16,r16,r3
    1fd0:	8106b03a 	or	r3,r16,r4
    1fd4:	1cc6b03a 	or	r3,r3,r19
    1fd8:	dfc00717 	ldw	ra,28(sp)
    1fdc:	dd800617 	ldw	r22,24(sp)
    1fe0:	dd400517 	ldw	r21,20(sp)
    1fe4:	dd000417 	ldw	r20,16(sp)
    1fe8:	dcc00317 	ldw	r19,12(sp)
    1fec:	dc800217 	ldw	r18,8(sp)
    1ff0:	dc400117 	ldw	r17,4(sp)
    1ff4:	dc000017 	ldw	r16,0(sp)
    1ff8:	dec00804 	addi	sp,sp,32
    1ffc:	f800283a 	ret
    2000:	800697fa 	slli	r3,r16,31
    2004:	8804d07a 	srli	r2,r17,1
    2008:	21010004 	addi	r4,r4,1024
    200c:	8020d07a 	srli	r16,r16,1
    2010:	18a2b03a 	or	r17,r3,r2
    2014:	003fdf06 	br	1f94 <__pack_d+0x94>
    2018:	88c0400c 	andi	r3,r17,256
    201c:	183fd926 	beq	r3,zero,1f84 <__pack_d+0x84>
    2020:	8885883a 	add	r2,r17,r2
    2024:	1463803a 	cmpltu	r17,r2,r17
    2028:	8c21883a 	add	r16,r17,r16
    202c:	1023883a 	mov	r17,r2
    2030:	003fd406 	br	1f84 <__pack_d+0x84>
    2034:	0101ffc4 	movi	r4,2047
    2038:	0005883a 	mov	r2,zero
    203c:	0021883a 	mov	r16,zero
    2040:	003fde06 	br	1fbc <__pack_d+0xbc>
    2044:	84000234 	orhi	r16,r16,8
    2048:	00c00434 	movhi	r3,16
    204c:	18ffffc4 	addi	r3,r3,-1
    2050:	8805883a 	mov	r2,r17
    2054:	80e0703a 	and	r16,r16,r3
    2058:	0101ffc4 	movi	r4,2047
    205c:	003fd706 	br	1fbc <__pack_d+0xbc>
    2060:	1129c83a 	sub	r20,r2,r4
    2064:	00800e04 	movi	r2,56
    2068:	15002716 	blt	r2,r20,2108 <__pack_d+0x208>
    206c:	800b883a 	mov	r5,r16
    2070:	a00d883a 	mov	r6,r20
    2074:	8809883a 	mov	r4,r17
    2078:	00022280 	call	2228 <__lshrdi3>
    207c:	9009883a 	mov	r4,r18
    2080:	000b883a 	mov	r5,zero
    2084:	a00d883a 	mov	r6,r20
    2088:	102d883a 	mov	r22,r2
    208c:	182b883a 	mov	r21,r3
    2090:	000226c0 	call	226c <__ashldi3>
    2094:	1009003a 	cmpeq	r4,r2,zero
    2098:	1907c83a 	sub	r3,r3,r4
    209c:	10bfffc4 	addi	r2,r2,-1
    20a0:	1c20703a 	and	r16,r3,r16
    20a4:	1444703a 	and	r2,r2,r17
    20a8:	1404b03a 	or	r2,r2,r16
    20ac:	1004c03a 	cmpne	r2,r2,zero
    20b0:	1584b03a 	or	r2,r2,r22
    20b4:	11003fcc 	andi	r4,r2,255
    20b8:	01402004 	movi	r5,128
    20bc:	a807883a 	mov	r3,r21
    20c0:	2140131e 	bne	r4,r5,2110 <__pack_d+0x210>
    20c4:	1140400c 	andi	r5,r2,256
    20c8:	28000426 	beq	r5,zero,20dc <__pack_d+0x1dc>
    20cc:	1109883a 	add	r4,r2,r4
    20d0:	2085803a 	cmpltu	r2,r4,r2
    20d4:	1547883a 	add	r3,r2,r21
    20d8:	2005883a 	mov	r2,r4
    20dc:	1808963a 	slli	r4,r3,24
    20e0:	1004d23a 	srli	r2,r2,8
    20e4:	1820913a 	slli	r16,r3,4
    20e8:	01440034 	movhi	r5,4096
    20ec:	297fffc4 	addi	r5,r5,-1
    20f0:	2084b03a 	or	r2,r4,r2
    20f4:	8020d33a 	srli	r16,r16,12
    20f8:	01000044 	movi	r4,1
    20fc:	28ffaf36 	bltu	r5,r3,1fbc <__pack_d+0xbc>
    2100:	0009883a 	mov	r4,zero
    2104:	003fad06 	br	1fbc <__pack_d+0xbc>
    2108:	0005883a 	mov	r2,zero
    210c:	0007883a 	mov	r3,zero
    2110:	11001fc4 	addi	r4,r2,127
    2114:	2085803a 	cmpltu	r2,r4,r2
    2118:	10c7883a 	add	r3,r2,r3
    211c:	2005883a 	mov	r2,r4
    2120:	003fee06 	br	20dc <__pack_d+0x1dc>

00002124 <__unpack_d>:
    2124:	21800117 	ldw	r6,4(r4)
    2128:	20c00017 	ldw	r3,0(r4)
    212c:	3004d7fa 	srli	r2,r6,31
    2130:	3008d53a 	srli	r4,r6,20
    2134:	28800115 	stw	r2,4(r5)
    2138:	2101ffcc 	andi	r4,r4,2047
    213c:	00800434 	movhi	r2,16
    2140:	10bfffc4 	addi	r2,r2,-1
    2144:	3084703a 	and	r2,r6,r2
    2148:	20001a1e 	bne	r4,zero,21b4 <__unpack_d+0x90>
    214c:	1888b03a 	or	r4,r3,r2
    2150:	20002626 	beq	r4,zero,21ec <__unpack_d+0xc8>
    2154:	1808d63a 	srli	r4,r3,24
    2158:	1004923a 	slli	r2,r2,8
    215c:	01bf0084 	movi	r6,-1022
    2160:	29800215 	stw	r6,8(r5)
    2164:	2084b03a 	or	r2,r4,r2
    2168:	010000c4 	movi	r4,3
    216c:	29000015 	stw	r4,0(r5)
    2170:	02040034 	movhi	r8,4096
    2174:	423fffc4 	addi	r8,r8,-1
    2178:	1806923a 	slli	r3,r3,8
    217c:	40801836 	bltu	r8,r2,21e0 <__unpack_d+0xbc>
    2180:	013f0044 	movi	r4,-1023
    2184:	18cd883a 	add	r6,r3,r3
    2188:	30c7803a 	cmpltu	r3,r6,r3
    218c:	1085883a 	add	r2,r2,r2
    2190:	1885883a 	add	r2,r3,r2
    2194:	200f883a 	mov	r7,r4
    2198:	3007883a 	mov	r3,r6
    219c:	213fffc4 	addi	r4,r4,-1
    21a0:	40bff82e 	bgeu	r8,r2,2184 <__unpack_d+0x60>
    21a4:	29c00215 	stw	r7,8(r5)
    21a8:	28c00315 	stw	r3,12(r5)
    21ac:	28800415 	stw	r2,16(r5)
    21b0:	f800283a 	ret
    21b4:	01c1ffc4 	movi	r7,2047
    21b8:	21c00f26 	beq	r4,r7,21f8 <__unpack_d+0xd4>
    21bc:	180cd63a 	srli	r6,r3,24
    21c0:	1004923a 	slli	r2,r2,8
    21c4:	213f0044 	addi	r4,r4,-1023
    21c8:	1806923a 	slli	r3,r3,8
    21cc:	3084b03a 	or	r2,r6,r2
    21d0:	29000215 	stw	r4,8(r5)
    21d4:	010000c4 	movi	r4,3
    21d8:	10840034 	orhi	r2,r2,4096
    21dc:	29000015 	stw	r4,0(r5)
    21e0:	28c00315 	stw	r3,12(r5)
    21e4:	28800415 	stw	r2,16(r5)
    21e8:	f800283a 	ret
    21ec:	00800084 	movi	r2,2
    21f0:	28800015 	stw	r2,0(r5)
    21f4:	f800283a 	ret
    21f8:	1888b03a 	or	r4,r3,r2
    21fc:	20000526 	beq	r4,zero,2214 <__unpack_d+0xf0>
    2200:	3180022c 	andhi	r6,r6,8
    2204:	30000626 	beq	r6,zero,2220 <__unpack_d+0xfc>
    2208:	01000044 	movi	r4,1
    220c:	29000015 	stw	r4,0(r5)
    2210:	003ff306 	br	21e0 <__unpack_d+0xbc>
    2214:	00800104 	movi	r2,4
    2218:	28800015 	stw	r2,0(r5)
    221c:	f800283a 	ret
    2220:	28000015 	stw	zero,0(r5)
    2224:	003fee06 	br	21e0 <__unpack_d+0xbc>

00002228 <__lshrdi3>:
    2228:	2005883a 	mov	r2,r4
    222c:	2807883a 	mov	r3,r5
    2230:	30000826 	beq	r6,zero,2254 <__lshrdi3+0x2c>
    2234:	01000804 	movi	r4,32
    2238:	2189c83a 	sub	r4,r4,r6
    223c:	0100060e 	bge	zero,r4,2258 <__lshrdi3+0x30>
    2240:	1184d83a 	srl	r2,r2,r6
    2244:	2908983a 	sll	r4,r5,r4
    2248:	298cd83a 	srl	r6,r5,r6
    224c:	2084b03a 	or	r2,r4,r2
    2250:	3007883a 	mov	r3,r6
    2254:	f800283a 	ret
    2258:	0105c83a 	sub	r2,zero,r4
    225c:	000d883a 	mov	r6,zero
    2260:	2884d83a 	srl	r2,r5,r2
    2264:	3007883a 	mov	r3,r6
    2268:	003ffa06 	br	2254 <__lshrdi3+0x2c>

0000226c <__ashldi3>:
    226c:	2005883a 	mov	r2,r4
    2270:	2807883a 	mov	r3,r5
    2274:	30000826 	beq	r6,zero,2298 <__ashldi3+0x2c>
    2278:	01000804 	movi	r4,32
    227c:	2189c83a 	sub	r4,r4,r6
    2280:	0100060e 	bge	zero,r4,229c <__ashldi3+0x30>
    2284:	1108d83a 	srl	r4,r2,r4
    2288:	2986983a 	sll	r3,r5,r6
    228c:	118c983a 	sll	r6,r2,r6
    2290:	20c6b03a 	or	r3,r4,r3
    2294:	3005883a 	mov	r2,r6
    2298:	f800283a 	ret
    229c:	0107c83a 	sub	r3,zero,r4
    22a0:	000d883a 	mov	r6,zero
    22a4:	10c6983a 	sll	r3,r2,r3
    22a8:	3005883a 	mov	r2,r6
    22ac:	003ffa06 	br	2298 <__ashldi3+0x2c>

000022b0 <alt_getchar>:
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    22b0:	00800034 	movhi	r2,0
    22b4:	108a5404 	addi	r2,r2,10576
    22b8:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    22bc:	defffe04 	addi	sp,sp,-8
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    22c0:	01000034 	movhi	r4,0
    22c4:	210a6a04 	addi	r4,r4,10664
    22c8:	d80b883a 	mov	r5,sp
    22cc:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    22d0:	dfc00115 	stw	ra,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    22d4:	000263c0 	call	263c <altera_avalon_jtag_uart_read>
    22d8:	0080020e 	bge	zero,r2,22e4 <alt_getchar+0x34>
        return -1;
    }
    return c;
    22dc:	d8800007 	ldb	r2,0(sp)
    22e0:	00000106 	br	22e8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    22e4:	00bfffc4 	movi	r2,-1
    }
    return c;
#else
    return getchar();
#endif
}
    22e8:	dfc00117 	ldw	ra,4(sp)
    22ec:	dec00204 	addi	sp,sp,8
    22f0:	f800283a 	ret

000022f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    22f4:	deffff04 	addi	sp,sp,-4
    22f8:	dfc00015 	stw	ra,0(sp)
    22fc:	00c00034 	movhi	r3,0
    2300:	18ca5404 	addi	r3,r3,10576
    2304:	01000034 	movhi	r4,0
    2308:	210a7004 	addi	r4,r4,10688

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    230c:	1900061e 	bne	r3,r4,2328 <alt_load+0x34>
    2310:	00c02074 	movhi	r3,129
    2314:	18e00804 	addi	r3,r3,-32736
    2318:	01000034 	movhi	r4,0
    231c:	21000004 	addi	r4,r4,0
    2320:	1900151e 	bne	r3,r4,2378 <alt_load+0x84>
    2324:	00000e06 	br	2360 <alt_load+0x6c>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    2328:	01400034 	movhi	r5,0
    232c:	294a7004 	addi	r5,r5,10688
    2330:	00bfff04 	movi	r2,-4
    2334:	28cbc83a 	sub	r5,r5,r3
    2338:	288a703a 	and	r5,r5,r2
    233c:	0005883a 	mov	r2,zero
    2340:	00000506 	br	2358 <alt_load+0x64>
    2344:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    2348:	39c00017 	ldw	r7,0(r7)
    234c:	188d883a 	add	r6,r3,r2
    2350:	10800104 	addi	r2,r2,4
    2354:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    2358:	117ffa1e 	bne	r2,r5,2344 <alt_load+0x50>
    235c:	003fec06 	br	2310 <alt_load+0x1c>
    2360:	00c00034 	movhi	r3,0
    2364:	18c9c304 	addi	r3,r3,9996
    2368:	01000034 	movhi	r4,0
    236c:	2109c304 	addi	r4,r4,9996

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2370:	1900131e 	bne	r3,r4,23c0 <alt_load+0xcc>
    2374:	00000e06 	br	23b0 <alt_load+0xbc>
    2378:	01402074 	movhi	r5,129
    237c:	29600804 	addi	r5,r5,-32736
    2380:	00bfff04 	movi	r2,-4
    2384:	28cbc83a 	sub	r5,r5,r3
    2388:	288a703a 	and	r5,r5,r2
    238c:	0005883a 	mov	r2,zero
    2390:	00000506 	br	23a8 <alt_load+0xb4>
    2394:	208f883a 	add	r7,r4,r2
  {
    while( to != end )
    {
      *to++ = *from++;
    2398:	39c00017 	ldw	r7,0(r7)
    239c:	188d883a 	add	r6,r3,r2
    23a0:	10800104 	addi	r2,r2,4
    23a4:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    23a8:	117ffa1e 	bne	r2,r5,2394 <alt_load+0xa0>
    23ac:	003fec06 	br	2360 <alt_load+0x6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    23b0:	00026cc0 	call	26cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    23b4:	dfc00017 	ldw	ra,0(sp)
    23b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    23bc:	00026d81 	jmpi	26d8 <alt_icache_flush_all>
 * alt_load() is called when the code is executing from flash. In this case
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
    23c0:	01400034 	movhi	r5,0
    23c4:	294a5404 	addi	r5,r5,10576
    23c8:	00bfff04 	movi	r2,-4
    23cc:	28cbc83a 	sub	r5,r5,r3
    23d0:	288a703a 	and	r5,r5,r2
    23d4:	0005883a 	mov	r2,zero
    23d8:	00000506 	br	23f0 <alt_load+0xfc>
    23dc:	208f883a 	add	r7,r4,r2
    {
      *to++ = *from++;
    23e0:	39c00017 	ldw	r7,0(r7)
    23e4:	188d883a 	add	r6,r3,r2
    23e8:	10800104 	addi	r2,r2,4
    23ec:	31c00015 	stw	r7,0(r6)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    23f0:	117ffa1e 	bne	r2,r5,23dc <alt_load+0xe8>
    23f4:	003fee06 	br	23b0 <alt_load+0xbc>

000023f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    23f8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    23fc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2400:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2404:	00026180 	call	2618 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2408:	00026380 	call	2638 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    240c:	d1202417 	ldw	r4,-32624(gp)
    2410:	d1602317 	ldw	r5,-32628(gp)
    2414:	d1a02217 	ldw	r6,-32632(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2418:	dfc00017 	ldw	ra,0(sp)
    241c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2420:	00002981 	jmpi	298 <main>

00002424 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    2424:	defff204 	addi	sp,sp,-56
    2428:	dfc00a15 	stw	ra,40(sp)
    242c:	df000915 	stw	fp,36(sp)
    2430:	ddc00815 	stw	r23,32(sp)
    2434:	dd800715 	stw	r22,28(sp)
    2438:	dd400615 	stw	r21,24(sp)
    243c:	dd000515 	stw	r20,20(sp)
    2440:	dcc00415 	stw	r19,16(sp)
    2444:	dc800315 	stw	r18,12(sp)
    2448:	dc400215 	stw	r17,8(sp)
    244c:	dc000115 	stw	r16,4(sp)
    2450:	d9400b15 	stw	r5,44(sp)
    2454:	d9800c15 	stw	r6,48(sp)
    2458:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    245c:	04c00944 	movi	r19,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    2460:	dc000b04 	addi	r16,sp,44
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    2464:	2025883a 	mov	r18,r4
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2468:	050018c4 	movi	r20,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    246c:	05401e04 	movi	r21,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2470:	05801cc4 	movi	r22,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2474:	00003906 	br	255c <alt_printf+0x138>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2478:	24c00226 	beq	r4,r19,2484 <alt_printf+0x60>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    247c:	94800044 	addi	r18,r18,1
    2480:	00000506 	br	2498 <alt_printf+0x74>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2484:	90800047 	ldb	r2,1(r18)
    2488:	94800084 	addi	r18,r18,2
    248c:	10003526 	beq	r2,zero,2564 <alt_printf+0x140>
            {
                if (c == '%')
    2490:	14c0031e 	bne	r2,r19,24a0 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    2494:	9809883a 	mov	r4,r19
    2498:	00025940 	call	2594 <alt_putchar>
    249c:	00002f06 	br	255c <alt_printf+0x138>
                } 
                else if (c == 'c')
    24a0:	1500051e 	bne	r2,r20,24b8 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    24a4:	81000017 	ldw	r4,0(r16)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    24a8:	84400104 	addi	r17,r16,4
    24ac:	8821883a 	mov	r16,r17
                    alt_putchar(v);
    24b0:	00025940 	call	2594 <alt_putchar>
    24b4:	00002906 	br	255c <alt_printf+0x138>
                }
                else if (c == 'x')
    24b8:	1540201e 	bne	r2,r21,253c <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    24bc:	85c00017 	ldw	r23,0(r16)
    24c0:	84000104 	addi	r16,r16,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    24c4:	b800041e 	bne	r23,zero,24d8 <alt_printf+0xb4>
                    {
                        alt_putchar('0');
    24c8:	01000c04 	movi	r4,48
    24cc:	003ff206 	br	2498 <alt_printf+0x74>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
    24d0:	8c7fff04 	addi	r17,r17,-4
    24d4:	00000206 	br	24e0 <alt_printf+0xbc>
                    unsigned long v = va_arg(args, unsigned long);
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    24d8:	04400704 	movi	r17,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    24dc:	00c003c4 	movi	r3,15
    24e0:	1c44983a 	sll	r2,r3,r17
    24e4:	15c4703a 	and	r2,r2,r23
    24e8:	103ff926 	beq	r2,zero,24d0 <alt_printf+0xac>
    24ec:	00000f06 	br	252c <alt_printf+0x108>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    24f0:	e448983a 	sll	r4,fp,r17
    24f4:	25c8703a 	and	r4,r4,r23
    24f8:	2448d83a 	srl	r4,r4,r17
                        if (digit <= 9)
    24fc:	19000236 	bltu	r3,r4,2508 <alt_printf+0xe4>
                            c = '0' + digit;
    2500:	21000c04 	addi	r4,r4,48
    2504:	00000106 	br	250c <alt_printf+0xe8>
                        else
                            c = 'a' + digit - 10;
    2508:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    250c:	21003fcc 	andi	r4,r4,255
    2510:	2100201c 	xori	r4,r4,128
    2514:	213fe004 	addi	r4,r4,-128
    2518:	d8c00015 	stw	r3,0(sp)
    251c:	00025940 	call	2594 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2520:	8c7fff04 	addi	r17,r17,-4
    2524:	d8c00017 	ldw	r3,0(sp)
    2528:	00000206 	br	2534 <alt_printf+0x110>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    252c:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2530:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2534:	883fee0e 	bge	r17,zero,24f0 <alt_printf+0xcc>
    2538:	00000806 	br	255c <alt_printf+0x138>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    253c:	1580071e 	bne	r2,r22,255c <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    2540:	84400017 	ldw	r17,0(r16)
    2544:	84000104 	addi	r16,r16,4

                    while(*s)
    2548:	00000206 	br	2554 <alt_printf+0x130>
                      alt_putchar(*s++);
    254c:	8c400044 	addi	r17,r17,1
    2550:	00025940 	call	2594 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    2554:	89000007 	ldb	r4,0(r17)
    2558:	203ffc1e 	bne	r4,zero,254c <alt_printf+0x128>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    255c:	91000007 	ldb	r4,0(r18)
    2560:	203fc51e 	bne	r4,zero,2478 <alt_printf+0x54>
            {
                break;
            }
        }
    }
}
    2564:	dfc00a17 	ldw	ra,40(sp)
    2568:	df000917 	ldw	fp,36(sp)
    256c:	ddc00817 	ldw	r23,32(sp)
    2570:	dd800717 	ldw	r22,28(sp)
    2574:	dd400617 	ldw	r21,24(sp)
    2578:	dd000517 	ldw	r20,20(sp)
    257c:	dcc00417 	ldw	r19,16(sp)
    2580:	dc800317 	ldw	r18,12(sp)
    2584:	dc400217 	ldw	r17,8(sp)
    2588:	dc000117 	ldw	r16,4(sp)
    258c:	dec00e04 	addi	sp,sp,56
    2590:	f800283a 	ret

00002594 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2594:	defffd04 	addi	sp,sp,-12
    2598:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    259c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    25a0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    25a4:	d80b883a 	mov	r5,sp
    25a8:	01000034 	movhi	r4,0
    25ac:	210a6a04 	addi	r4,r4,10664
    25b0:	01800044 	movi	r6,1
    25b4:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    25b8:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    25bc:	00026980 	call	2698 <altera_avalon_jtag_uart_write>
    25c0:	00ffffc4 	movi	r3,-1
    25c4:	10c0011e 	bne	r2,r3,25cc <alt_putchar+0x38>
        return -1;
    25c8:	1021883a 	mov	r16,r2
    }
    return c;
#else
    return putchar(c);
#endif
}
    25cc:	8005883a 	mov	r2,r16
    25d0:	dfc00217 	ldw	ra,8(sp)
    25d4:	dc000117 	ldw	r16,4(sp)
    25d8:	dec00304 	addi	sp,sp,12
    25dc:	f800283a 	ret

000025e0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    25e0:	defffe04 	addi	sp,sp,-8
    25e4:	dc000015 	stw	r16,0(sp)
    25e8:	dfc00115 	stw	ra,4(sp)
    25ec:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    25f0:	00026e40 	call	26e4 <strlen>
    25f4:	01000034 	movhi	r4,0
    25f8:	210a6a04 	addi	r4,r4,10664
    25fc:	800b883a 	mov	r5,r16
    2600:	100d883a 	mov	r6,r2
    2604:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    2608:	dfc00117 	ldw	ra,4(sp)
    260c:	dc000017 	ldw	r16,0(sp)
    2610:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2614:	00026981 	jmpi	2698 <altera_avalon_jtag_uart_write>

00002618 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2618:	deffff04 	addi	sp,sp,-4
    261c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS, NIOS);
    2620:	00026dc0 	call	26dc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2624:	00800044 	movi	r2,1
    2628:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    262c:	dfc00017 	ldw	ra,0(sp)
    2630:	dec00104 	addi	sp,sp,4
    2634:	f800283a 	ret

00002638 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2638:	f800283a 	ret

0000263c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    263c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    2640:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    2644:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    2648:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    264c:	00000a06 	br	2678 <altera_avalon_jtag_uart_read+0x3c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    2650:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    2654:	1a60000c 	andi	r9,r3,32768
    2658:	48000326 	beq	r9,zero,2668 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    265c:	10c00005 	stb	r3,0(r2)
    2660:	10800044 	addi	r2,r2,1
    2664:	00000406 	br	2678 <altera_avalon_jtag_uart_read+0x3c>
    else if (ptr != buffer)
    2668:	11400226 	beq	r2,r5,2674 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    266c:	1145c83a 	sub	r2,r2,r5
    2670:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    2674:	4000021e 	bne	r8,zero,2680 <altera_avalon_jtag_uart_read+0x44>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    2678:	11bff536 	bltu	r2,r6,2650 <altera_avalon_jtag_uart_read+0x14>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    267c:	117ffb1e 	bne	r2,r5,266c <altera_avalon_jtag_uart_read+0x30>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    2680:	39d0000c 	andi	r7,r7,16384
    2684:	38000226 	beq	r7,zero,2690 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
    2688:	00bffd44 	movi	r2,-11
    268c:	f800283a 	ret
  else
    return -EIO;
    2690:	00bffec4 	movi	r2,-5
}
    2694:	f800283a 	ret

00002698 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    2698:	20c00017 	ldw	r3,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    269c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    26a0:	2989883a 	add	r4,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26a4:	19800104 	addi	r6,r3,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    26a8:	00000606 	br	26c4 <altera_avalon_jtag_uart_write+0x2c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    26ac:	31c00037 	ldwio	r7,0(r6)
    26b0:	39ffffec 	andhi	r7,r7,65535
    26b4:	383ffd26 	beq	r7,zero,26ac <altera_avalon_jtag_uart_write+0x14>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    26b8:	29c00007 	ldb	r7,0(r5)
    26bc:	29400044 	addi	r5,r5,1
    26c0:	19c00035 	stwio	r7,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    26c4:	293ff936 	bltu	r5,r4,26ac <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    26c8:	f800283a 	ret

000026cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    26cc:	f800283a 	ret

000026d0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    26d0:	3005883a 	mov	r2,r6
    26d4:	f800283a 	ret

000026d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    26d8:	f800283a 	ret

000026dc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    26dc:	000170fa 	wrctl	ienable,zero
    26e0:	f800283a 	ret

000026e4 <strlen>:
    26e4:	20800007 	ldb	r2,0(r4)
    26e8:	10000626 	beq	r2,zero,2704 <strlen+0x20>
    26ec:	2005883a 	mov	r2,r4
    26f0:	10800044 	addi	r2,r2,1
    26f4:	10c00007 	ldb	r3,0(r2)
    26f8:	183ffd1e 	bne	r3,zero,26f0 <strlen+0xc>
    26fc:	1105c83a 	sub	r2,r2,r4
    2700:	f800283a 	ret
    2704:	0005883a 	mov	r2,zero
    2708:	f800283a 	ret
